# kubectl get csidrivers
# kubectl logs pod/csi-rbdplugin-4jbgn -n rook-ceph
# kubectl get csinodes

# https://github.com/rook/rook/issues/5065
# https://docs.ceph.com/en/latest/rados/configuration/network-config-ref/
#- name: Configure IPTables for MON
#  shell: |
#    iptables -A INPUT -i ens192 -p tcp -s 192.168.0.0/24 --dport 6789 -j ACCEPT
#  register: config_mon_iptables
#- debug: msg={{ config_mon_iptables }}
#
#
#- name: Configure IPTables for MDS
#  shell: |
#    iptables -A INPUT -i ens192 -m multiport -p tcp -s 192.168.0.0/24 --dports 6800:7568 -j ACCEPT
#  register: config_mds_iptables
#- debug: msg={{ config_mds_iptables }}
#
#
#- name: Configure IPTables for OSD
#  shell: |
#    iptables -A INPUT -i ens192  -m multiport -p tcp -s 192.168.0.0/24 --dports 6800:7568 -j ACCEPT
#  register: config_osd_iptables
#- debug: msg={{ config_osd_iptables }}


# Rook in GCP
# https://ashish932.medium.com/f3abe23d9e79


# If it's not loaded, rbd csiplugin containers will be running and it's Error and Crash
- name: Load RBD Kernel Module
  shell: |
    modprobe rbd
  register: load_rbd_kernel_module
  ignore_errors: true
- debug: msg={{ load_rbd_kernel_module }}
  when: print_debug == true


#- name: Clone Rook Source Code
#  shell: |
#    git -C "{{ base_path }}" clone --single-branch --branch release-1.14 https://github.com/rook/rook.git
#  register: git_clone_rook
#  ignore_errors: true
#- debug: msg={{ git_clone_rook }}
#  when: print_debug == true


- name: Creae CRDs
  shell: |
    kubectl create -f crds.yaml
  register: create_crds
  args:
    chdir: "{{ base_path }}/rook/deploy/examples/"
- debug: msg={{ create_crds }}
  when: print_debug == true


- name: Create Common
  shell: |
    kubectl create -f common.yaml
  register: create_common
  args:
    chdir: "{{ base_path }}/rook/deploy/examples/"
- debug: msg={{ create_common }}
  when: print_debug == true


#- name: Enable ROOK Discovery Daemon
#  lineinfile:
#    dest: "{{ base_path }}/rook/deploy/examples/operator.yaml"
#    regexp: "{{ item.regexp }}"
#    line: "{{ item.line }}"
#    state: "{{ item.state }}"
#  register: enable_rook_discovery_daemon
#  with_items:
#    - { regexp: '^  ROOK_ENABLE_DISCOVERY_DAEMON:*', line: '  ROOK_ENABLE_DISCOVERY_DAEMON: "true"', state: present }
#- debug: msg={{ enable_rook_discovery_daemon }}
#  when: print_debug == true


- name: Create Operator
  shell: |
    kubectl apply -f operator.yaml
  register: create_operator
  args:
    chdir: "{{ base_path }}/rook/deploy/examples/"
- debug: msg={{ create_operator }}
  when: print_debug == true


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_operator_containers
  until: check_operator_containers.stdout.find("ContainerCreating") == -1
  retries: 60
- debug: msg={{ check_operator_containers }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: cluster-on-local-pvc.yaml.j2
    dest: "{{ base_path }}/cluster-on-local-pvc.yaml"
  register: copy_cluster_local_pvc_config_yaml
  ignore_errors: yes
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f cluster-on-local-pvc.yaml
  register: create_ceph_cluster
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ create_ceph_cluster }}
  when: print_debug == true
  # kubectl apply -f cluster.yaml
  # chdir: "{{ base_path }}/rook/deploy/examples/"


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_init_pod
  until: check_init_pod.stdout.find("PodInitializing") == -1
  retries: 60
- debug: msg={{ check_init_pod }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("ContainerCreating") == -1
  retries: 60
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("Init") == -1
  retries: 5
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("Terminating") == -1
  retries: 20
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("ContainerCreating") == -1
  retries: 60
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("Terminating") == -1
  retries: 20
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("PodInitializing") == -1
  retries: 20
- debug: msg={{ check_create_containers }}


- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("ContainerCreating") == -1
  retries: 60
- debug: msg={{ check_create_containers }}

- pause:
    seconds: 100

- name: Validate if All Containers are Running
  shell: kubectl -n rook-ceph get all
  register: check_create_containers
  until: check_create_containers.stdout.find("ContainerCreating") == -1
  retries: 60
- debug: msg={{ check_create_containers }}


#- name: Create Toolbox Pod
#  shell: |
#    kubectl create -f toolbox.yaml
#  register: create_toolbox_pod
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ create_toolbox_pod }}


#- name: Validate if All Containers are Running
#  shell: kubectl -n rook-ceph get pods | grep tool
#  register: check_tools_containers
#  until: check_tools_containers.stdout.find("ContainerCreating") == -1
#  retries: 10
#- debug: msg={{ check_tools_containers }}


# toolbox=$(kubectl -n rook-ceph get pods -o custom-columns=NAME:.metadata.name --no-headers | grep tools)
# kubectl -n rook-ceph exec -it $toolbox sh
# ceph status


#- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
#  shell: |
#    kubectl apply -f storageclass.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}
#  when: print_debug == true
#  #  kubectl apply -f cluster.yaml



#- name: X
#  shell: |
#    kubectl apply -f filesystem.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}


#- name: X
#  shell: |
#    kubectl apply -f csi/cephfs/storageclass.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}
# rook/deploy/examples/csi/cephfs/storageclass.yaml
# rook/deploy/examples/csi/nfs/storageclass.yaml
# rook/deploy/examples/csi/rbd/storageclass.yaml


#- name: X
#  shell: |
#    kubectl apply -f toolbox.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}


#- name: X
#  shell: |
#    kubectl get deploy rook-ceph-tools -n rook-ceph
#  register: X
#- debug: msg={{ X }}

# $ kubectl -n rook-ceph exec -it $(kubectl -n rook-ceph get pod -l "app=rook-ceph-tools" -o jsonpath='{.items[0].metadata.name}') bash
# (toolbox)$ ceph -s
# (toolbox)$ ceph osd status
#

#- name: Check if Rook is Deployed Successfully
#  shell: kubectl get CephFileSystem -A
#  register: check_rook_deployment
#  ignore_errors: yes
#  until: check_rook_deployment.stdout.find("Progressing") == -1
#  retries: 30
#- debug: msg={{ check_rook_deployment }}


#- name: X
#  shell: |
#    kubectl apply -f csi/cephfs/kube-registry.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}


#- name: X
#  shell: |
#    kubectl apply -f dashboard-loadbalancer.yaml
#  register: X
#  args:
#    chdir: "{{ base_path }}/rook/deploy/examples/"
#- debug: msg={{ X }}


#- name: Get IP Address of Rook Load Balancer and Nginx Ingress Controller
#  shell: |
#    kubectl get all -A | grep -E "service/rook-loadbalancer|service/nginx-ingress-controller"
#  register: get_ipaddr_rook_lb
#  ignore_errors: yes
#- debug: msg={{ get_ipaddr_rook_lb }}


# Need to check why OSD and MGR is not running
# kubectl -n rook-ceph get pods -o wide
# kubectl -n rook-ceph logs    rook-ceph-operator-775cf575c5-5mn4c


# [ Check Rook and NGINX Ingress ]
# kubectl get events --all-namespaces  --sort-by='.metadata.creationTimestamp'
# kubectl -n cattle-system describe pods
# kubectl -n cattle-system get all
# kubectl -n cattle-system get pods
# kubectl -n cattle-system logs <pod-name>

# OSD or OSD Prepare can not be created
# https://github.com/rook/rook/issues/2916
# https://stackoverflow.com/questions/62045052/why-cant-find-osd-pod-in-kubernetes-after-deploying-rook-ceph
# https://1week.tistory.com/16
