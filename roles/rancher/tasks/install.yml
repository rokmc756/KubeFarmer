- name: Apply strictARP for VMWare or Cloud
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system
  register: apply_strict_arp
- debug: msg={{ apply_strict_arp }}


- name: Check strictARP
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | grep strictARP
  register: check_strict_arp
- debug: msg={{ check_strict_arp }}


- name: Apply the Metallb Native
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.11/config/manifests/metallb-native.yaml
  register: apply_metallb_native_config
  ignore_errors: yes
- debug: msg={{ apply_metallb_native_config }}


- name: Create Secret for Metallb Namespace
  shell: |
    kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
  register: create_metallb_secret
  ignore_errors: yes
- debug: msg={{ create_metallb_secret }}


- name: Copy Metallb Config Yaml for VMware
  template:
    src: metallb-config-vmware.yaml.j2
    dest: /root/metallb-config-vmware.yaml
  register: copy_metallb_vmware_yaml
- debug: msg={{ copy_metallb_vmware_yaml }}


- name: Apply the Metallb Config for VMware
  shell: |
    kubectl apply -f /root/metallb-config-vmware.yaml
  register: apply_metallb_config
  ignore_errors: yes
- debug: msg={{ apply_metallb_config }}


- name: Clone Kubernetest Ingress
  shell: |
    git -C /root clone https://github.com/nginxinc/kubernetes-ingress.git --branch v3.0.2
  register: clone_k8s_ingress
  ignore_errors: true
- debug: msg={{ clone_k8s_ingress }}


- name: Add NGINX Helm Repo
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    helm repo add nginx-stable https://helm.nginx.com/stable
  register: add_nginx_helm_repo
- debug: msg={{ add_nginx_helm_repo }}


- name: Update Helm Repo
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    helm repo update
  register: update_helm_repo
- debug: msg={{ update_helm_repo }}


- name: Install NGINX Ingress
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    helm install nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress --create-namespace=true
  register: install_nginx_ingress
- debug: msg={{ install_nginx_ingress }}


- name: Apply NGINX Ingress CRDs
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    kubectl apply -f crds/ --namespace=nginx-ingress
  register: apply_nginx_ingress_crds
  ignore_errors: yes
- debug: msg={{ apply_nginx_ingress_crds }}


- name: Delete NGINX Ingress CRDs
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    kubectl delete -f crds/ --namespace=nginx-ingress
  register: delete_nginx_ingress_crds
  ignore_errors: yes
- debug: msg={{ delete_nginx_ingress_crds }}


- name: Apply NGINX Ingress CRDs
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    kubectl apply -f crds/ --namespace=nginx-ingress
  register: apply_nginx_ingress_crds
  ignore_errors: yes
- debug: msg={{ apply_nginx_ingress_crds }}


- name: Upgrade NGINX Ingress CRDs
  shell: |
    cd /root/kubernetes-ingress/deployments/helm-chart; \
    helm upgrade nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress
  register: upgrade_nginx_ingress_crds
- debug: msg={{ upgrade_nginx_ingress_crds }}


- name: Add Rancher Helm Repo
  shell: |
    helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
  register: add_rancher_helm_repo
- debug: msg={{ add_rancher_helm_repo }}


- name: Update Helm Repo
  shell: |
    helm repo update
  register: update_helm_repo
- debug: msg={{ update_helm_repo }}


- name: Create Namespace for Rancher
  shell: |
    kubectl create namespace cattle-system
  register: create_rancher_namespace
- debug: msg={{ create_rancher_namespace }}


- name: Apply Cert Manager CRDs
  shell: |
    kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.7.1/cert-manager.crds.yaml
  register: apply_cert_manager_crds
- debug: msg={{ apply_cert_manager_crds }}


- name: Create Namespace for Cert Manager
  shell: |
    kubectl create namespace cert-manager
  register: create_cert_manager_namespace
- debug: msg={{ create_cert_manager_namespace }}


- name: Add Jetstack Helm Repo
  shell: |
    helm repo add jetstack https://charts.jetstack.io
  register: add_jetstack_helm_repo
- debug: msg={{ add_jetstack_helm_repo }}


- name: Update Helm Repo
  shell: |
    helm repo update
  register: update_helm_repo
- debug: msg={{ update_helm_repo }}


- name: Intall Cert Manager by Helm
  shell: |
    helm install cert-manager jetstack/cert-manager --namespace cert-manager --version v1.7.1
  register: install_cert_manager
- debug: msg={{ install_cert_manager }}


- name: Copy Rancher Loadbalancer Config Yaml
  template:
    src: rancher-loadbalancer.yaml.j2
    dest: /root/rancher-loadbalancer.yaml
  register: copy_rancher_lb_config_yaml
- debug: msg={{ copy_rancher_lb_config_yaml }}


- name: Apply Rancher Load Balancer
  shell: |
    kubectl apply -f /root/rancher-loadbalancer.yaml
  register: apply_rancher_lb
- debug: msg={{ apply_rancher_lb }}


- name: Check Racher Pods
  shell: |
    kubectl get all -n cattle-system
  register: check_rancher_pods
- debug: msg={{ check_rancher_pods }}


- name: Install Rancher by Helm
  shell: |
    helm install rancher rancher-stable/rancher --namespace cattle-system --set hostname=rancher.jtest.suse.com
  register: install_rancher
- debug: msg={{ install_rancher }}


- name: Check the Status of the Deployment
  shell: |
    kubectl -n cattle-system rollout status deploy/rancher
  register: check_deployment_status
- debug: msg={{ check_deployment_status }}


- name: Check if Rancher is Deployed Successfully
  shell: |
    kubectl get all -n cattle-system
  register: check_rancher_deployment
- debug: msg={{ check_rancher_deployment }}


- name: Get Secret to login into Rancher
  shell: |
    kubectl get secret --namespace cattle-system bootstrap-secret -o go-template='{{.data.bootstrapPassword|base64decode}}{{"\n"}}'
  register: get_secret_login
- debug: msg={{ get_secret_login }}


# kubectl get events --all-namespaces  --sort-by='.metadata.creationTimestamp'
# kubectl -n cattle-system describe pods
# kubectl -n cattle-system get all
# kubectl -n cattle-system get pods
# kubectl -n cattle-system logs <pod-name>

