---
- name: Check if the Rancher Cleanup is Already Downloaded
  stat: path={{ base_path }}/rancher-cleanup
  register: rancher_cleanup_dir_existed
- debug: msg={{ rancher_cleanup_dir_existed }}


- name: Clone Rancher Cleanup
  shell: |
    git -C "{{ base_path }}" clone https://github.com/rancher/rancher-cleanup.git
  register: clone_rancher_cleanup
  ignore_errors: true
  when: rancher_cleanup_dir_existed.stat.exists != True
- debug: msg={{ clone_rancher_cleanup }}
  when: rancher_cleanup_dir_existed.stat.exists != True


- name: Cleanup Rancher
  shell: |
    kubectl create -f rancher-cleanup.yaml
  register: cleanup_rancher
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/rancher-cleanup/deploy/"
- debug: msg={{ cleanup_rancher }}


- name: Check if Cleanup Container is still Creating
  shell: |
    kubectl get all -n kube-system | grep "pod/cleanup-job"
  register: check_cleanup_container
  ignore_errors: true
  until: check_cleanup_container.stdout.find("ContainerCreating") == -1
  retries: 100
  delay: 10
- debug: msg={{ check_cleanup_container }}


# Watch Cleanup Logs
# kubectl -n kube-system logs -l job-name=cleanup-job -f


- name: Check if Rancher Namespaces are Still Active
  shell: kubectl get namespaces | grep -v cattle-ui-plugin | grep -E 'cattle|fleet'
  register: check_active_namespaces
  ignore_errors: true
  until: check_active_namespaces.stdout.find("Active") == -1
  retries: 100
  delay: 10
- debug: msg={{ check_active_namespaces }}


- name: Check if Rancher Namespaces are Still Terminating
  shell: kubectl get namespaces | grep -v cattle-ui-plugin | grep -E 'cattle|fleet'
  register: check_terminating_namespaces
  ignore_errors: true
  until: check_terminating_namespaces.stdout.find("") != -1
  retries: 20
  delay: 10
  changed_when: check_terminating_namespaces.rc != 1 and check_terminating_namespaces.rc != 0
- debug: msg={{ check_terminating_namespaces }}


- name: Check if Cleanup Pod is Still Terminating
  shell: kubectl get all -n kube-system
  register: check_cleanup_job_pod
  ignore_errors: yes
  until: check_cleanup_job_pod.stdout.find("Terminating") == -1
  retries: 20
  delay: 5
- debug: msg={{ check_cleanup_job_pod }}


# Delete Cleanup Rancher Pod and Service Accounts / ClusterRoleBindings
# kubectl delete $(kubectl get all -n kube-system | grep job.batch/cleanup-job | awk '{print $1}') -n kube-system


# Copy Rancher Cleanup Config Yaml
# rancher-cleanup.yaml.j2


# Verify Cleanup Rancher
# kubectl create -f verify.yaml


- name: Get the list of Remaining ServiceAccounts for Rancher NameSpace
  shell: |
    kubectl get ServiceAccount -A | grep cattle | awk '{print $1}'
  register: get_service_accounts_ns
  ignore_errors: yes
- debug: msg={{ get_service_accounts_ns }}


- name: Delete Rancher NameSpaces for Serivce Accounts
  shell: |
    kubectl delete ServiceAccount default -n {{ item }}
  register: delete_service_accounts_ns
  ignore_errors: yes
  with_items: "{{ get_service_accounts_ns.stdout_lines }}"
- debug: msg={{ delete_service_accounts_ns }}


- name: Delete Cleanup Rancher
  shell: |
    kubectl delete -f rancher-cleanup.yaml &
  register: delete_cleanup_rancher
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/rancher-cleanup/deploy/"
- debug: msg={{ delete_cleanup_rancher }}


#- name: Remove Rancher Cleanup Directory
#  file:
#    path: "{{ item }}"
#    state: absent
#  register: remove_rancher_cleanup_dir
#  with_items:
#    - "{{ base_path }}/rancher-cleanup"
#- debug: msg={{ remove_rancher_cleanup_dir }}


# Check Rancher and NGINX Ingress
# kubectl get events --all-namespaces  --sort-by='.metadata.creationTimestamp'

