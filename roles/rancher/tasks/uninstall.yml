# https://oopflow.medium.com/setup-install-rancher-onto-existing-kubernetes-cluster-for-high-availability-7351f0284592
#
#- name: Check the Status of the Deployment
#  shell: |
#    kubectl -n cattle-system rollout status deploy/rancher
#  register: check_deployment_status
#- debug: msg={{ check_deployment_status }}


# 1
- name: Check if Rancher is Deployed Successfully
  shell: kubectl get all -n cattle-system
  register: check_rancher_deployment
  ignore_errors: yes
- debug: msg={{ check_rancher_deployment }}


# 2
- name: Uninstall Rancher by Helm
  shell: |
    helm uninstall rancher --namespace cattle-system
  register: uninstall_rancher
  ignore_errors: yes
- debug: msg={{ uninstall_rancher }}
  # helm unistall rancher rancher-stable/rancher --namespace cattle-system --set hostname={{ rancher.hostname }}


# 3
- name: Check Racher Pods
  shell: kubectl get all -n cattle-system
  register: check_rancher_pods
  ignore_errors: yes
- debug: msg={{ check_rancher_pods }}


# 4
- name: Delete Rancher Load Balancer
  shell: |
    kubectl delete -f "{{ base_path }}"/rancher-loadbalancer.yaml
  register: delete_rancher_lb
  ignore_errors: yes
- debug: msg={{ delete_rancher_lb }}


#
- name: Remove Rancher Loadbalancer Config Yaml
  shell: |
    rm -f "{{ base_path }}"/rancher-loadbalancer.yaml
  register: remove_rancher_lb_config_yaml
  ignore_errors: yes
- debug: msg={{ remove_rancher_lb_config_yaml }}


# 5
- name: Unintall Cert Manager by Helm
  shell: |
    helm uninstall cert-manager --namespace cert-manager
  register: uninstall_cert_manager
  ignore_errors: yes
- debug: msg={{ uninstall_cert_manager }}
# helm install cert-manager jetstack/cert-manager --namespace cert-manager \
# --version v{{ cm.major_version }}.{{ cm.minor_version }}.{{ cm.patch_version }}

# 6
- name: Delete Namespace for Cert Manager
  shell: |
    kubectl delete all -n cert-manager --all
    kubectl delete namespace cert-manager
  register: delete_cert_manager_namespace
  ignore_errors: yes
- debug: msg={{ delete_cert_manager_namespace }}


# https://stackoverflow.com/questions/52369247/namespace-stucked-as-terminating-how-i-removed-it
#- name: Force Delete Cert Manager Namespace
#  shell: |
#    NAMESPACE={{ item }}
#    kubectl proxy & kubectl get namespace $NAMESPACE -o json | jq '.spec = {"finalizers":[]}' > /root/temp.json
#    kubectl replace --raw "/api/v1/namespaces/$NAMESPACE/finalize" -f /root/temp.json
#  register: delete_cert_manager_namespace
#  ignore_errors: yes
#  with_items:
#    - cert-manager
#- debug: msg={{ delete_cert_manager_namespace }}


# 7
- name: Delete Cert Manager CRDs
  shell: |
    kubectl delete -f \
    https://github.com/jetstack/cert-manager/releases/download/v{{ cm.major_version }}.{{ cm.minor_version }}.{{ cm.patch_version }}/cert-manager.crds.yaml
  register: delete_cert_manager_crds
  ignore_errors: yes
- debug: msg={{ delete_cert_manager_crds }}
#    kubectl apply --validate=false \
#    -f https://github.com/jetstack/cert-manager/releases/download/v{{ cm.major_version }}.{{ cm.minor_version }}.{{ cm.patch_version }}/cert-manager.crds.yaml


#
- name: Delete Namespace for Rancher
  shell: |
    kubectl delete all -n cattle-system --all
    kubectl delete namespace cattle-system
  register: delete_rancher_namespace
  ignore_errors: yes
- debug: msg={{ delete_rancher_namespace }}


# https://stackoverflow.com/questions/52369247/namespace-stucked-as-terminating-how-i-removed-it
#- name: Force Delete Cattle System Namespace
#  shell: |
#    NAMESPACE={{ item }}
#    kubectl proxy & kubectl get namespace $NAMESPACE -o json | jq '.spec = {"finalizers":[]}' > /root/temp.json
#    kubectl replace --raw "/api/v1/namespaces/$NAMESPACE/finalize" -f /root/temp.json
#  register: delete_cattle_system_namespace
#  ignore_errors: yes
#  with_items:
#    - cattle-system
#- debug: msg={{ delete_cattle_system_namespace }}


# 9
#- name: Upgrade NGINX Ingress CRDs
#  shell: |
#    helm upgrade nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress
#  register: upgrade_nginx_ingress_crds
#  args:
#    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
#- debug: msg={{ upgrade_nginx_ingress_crds }}


# 10
- name: Uninstall NGINX Ingress
  shell: |
    helm uninstall nginx-ingress --namespace=nginx-ingress
  register: uninstall_nginx_ingress
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
- debug: msg={{ uninstall_nginx_ingress }}
  #  helm install nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress --create-namespace=true


# 11
- name: Delete NGINX Ingress CRDs
  shell: |
    kubectl delete -f crds/ --namespace=nginx-ingress
  register: delete_nginx_ingress_crds
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
- debug: msg={{ delete_nginx_ingress_crds }}


# 12
- name: Remove Kubernetest Ingress Directory
  shell: |
    rm -rf "{{ base_path }}"/kubernetes-ingress
  register: remove_k8s_ingress_dir
  ignore_errors: true
- debug: msg={{ remove_k8s_ingress_dir }}


# 13
- name: Delete the Metallb Config for VMware
  shell: |
    kubectl delete -f "{{ base_path }}"/metallb-config-vmware.yaml
  register: delete_metallb_config
  ignore_errors: true
- debug: msg={{ delete_metallb_config }}


# 14
- name: Remove Metallb Config Yaml for VMware
  shell: |
    rm -rf "{{ base_path }}"/metallb-config-vmware.yaml
  register: remove_metallb_vmware_yaml
  ignore_errors: true
- debug: msg={{ remove_metallb_vmware_yaml }}


# 15
- name: Delete Secret for Metallb Namespace
  shell: |
    kubectl delete secret -n metallb-system memberlist
  register: delete_metallb_secret
  ignore_errors: yes
- debug: msg={{ delete_metallb_secret }}


# 16
#- name: Delete Metallib Native
#  shell: |
#    kubectl delete deployment.apps/controller -n metallb-system
#    kubectl delete daemonset.apps/speaker -n metallb-system
#    kubectl delete service/webhook-service -n metallb-system
#  register: delete_metallb_native
#  ignore_errors: yes
#- debug: msg={{ delete_metallb_native }}


# 16
#- name: Delete the Metallb Native
#  shell: |
#    kubectl delete -f \
#    https://raw.githubusercontent.com/metallb/metallb/v{{ metallb.major_version }}.{{ metallb.minor_version }}.{{ metallb.patch_version }}/config/manifests/metallb-native.yaml
#  register: delete_metallb_native_config
#- debug: msg={{ delete_metallb_native_config }}


# 5
- name: Unintall Metallb by Helm
  shell: |
    helm uninstall metallb --namespace metallb-system
  register: uninstall_metallb
  ignore_errors: yes
- debug: msg={{ uninstall_metallb }}


#
- name: Delete Metallb Namespace
  shell: |
    kubectl delete all -n metallb-system --all
    kubectl delete namespace metallb-system
  register: delete_metallb_system_namespace
  ignore_errors: yes
- debug: msg={{ delete_metallb_system_namespace }}


#- name: Force Delete Metallb System Namespace
#  shell: |
#    NAMESPACE={{ item }}
#    kubectl proxy & kubectl get namespace $NAMESPACE -o json | jq '.spec = {"finalizers":[]}' > /root/temp.json
#    kubectl replace --raw "/api/v1/namespaces/$NAMESPACE/finalize" -f /root/temp.json
#  register: delete_metallb_system_namespace
#  ignore_errors: yes
#  with_items:
#    - metallb-system
#- debug: msg={{ delete_metallb_system_namespace }}


# 17
- name: Rollback strictARP for VMWare or Cloud
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | \
    sed -e "s/strictARP: true/strictARP: false/" | kubectl apply -f - -n kube-system
  register: rollback_strict_arp
- debug: msg={{ rollback_strict_arp }}

