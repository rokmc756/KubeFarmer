---
# Install Kubernetes Dashboard

#
- name: Unset variables of bearer token
  set_fact:
    bearer_token:
  when: inventory_hostname in groups['master']

- name: Install Helm
  become: true
  become_user: root
  shell: |
    cd /root
    curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
    chmod 700 get_helm.sh
    ./get_helm.sh
  async: 120
  poll: 5
  register: helm_installed
  ignore_errors: yes
  when: inventory_hostname in groups['master']

- debug: msg={{ helm_installed }}

#
- name: Deploy Kubernetes the Dashboard UI
  become: true
  shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v{{ major_version }}.{{ minor_version }}.{{ patch_version }}/aio/deploy/recommended.yaml
  register: dashboard_ui_deployed
  when: inventory_hostname in groups['master']

#
- debug:
    var: dashboard_ui_deployed
  when: inventory_hostname in groups['master']

#
- debug: var=dashboard_ui_deployed
  when: inventory_hostname in groups['master']

#
- name: Copy config templates of Dashboard
  become: true
  become_user: root
  template:
    src: "{{ item }}"
    dest: "/root/{{ item }}"
    owner: root
    group: root
    mode: 644
    force: yes
  register: config_templates_copied
  with_items:
    - "dashboard-adminuser.yml"
    - "rbac.yml"
  when: inventory_hostname in groups['master']

#
- debug: var=config_templates_copied
  when: inventory_hostname in groups['master']

#
- name: Create a Service Account
  become: true
  shell: |
    kubectl apply -f /root/dashboard-adminuser.yml
  register: service_account_created
  when: inventory_hostname in groups['master']

#
- debug: var=service_account_created
  when: inventory_hostname in groups['master']

#
- name: Create a ClusterRoleBinding
  become: true
  shell: |
    kubectl apply -f /root/rbac.yml
  register: clusterrolebinding_created
  when: inventory_hostname in groups['master']

#
- debug: var=clusterrolebinding_created
  when: inventory_hostname in groups['master']

#
- name: Get a Bearer Token
  become: true
  shell: |
    kubectl -n kubernetes-dashboard create token admin-user
  register: bearer_token_gotten
  when: inventory_hostname in groups['master']

#
- debug: var=bearer_token_gotten
  when: inventory_hostname in groups['master']

#
#- name: Set fact for token ca certificate
#  set_fact:
#    token_ca_cert: "{{ (kubeadm_init.stdout_lines | select('search', 'discovery-token-ca-cert-hash') | list | string | split(' '))[1] }}"
#  delegate_to: "{{ item }}"
#  delegate_facts: True
#  with_items: "{{ groups['all'] }}"
#  when: inventory_hostname in groups['master']

#- debug:
#  msg: "{{ token_ca_cert }}"

#
#  become_user: root
#- name: Create hostfile file for multiple nodes
#  become_user: moonja    # it was pivotal previously
#  shell: "rm -f {{ playbook_dir }}/hostfile; tail -n +$(($( grep -n segments {{ playbook_dir }}/ansible-hosts
#| cut -d ':' -f 1 ) + 1)) {{ playbook_dir }}/ansible-hosts | awk '{print $1}' >> {{ playbook_dir }}/hostfile"
#  delegate_to: 127.0.0.1
#  when:
#    - inventory_hostname in groups['master']
#    - gpdb_install == True and gpdb_initdb_single == False

#
- name: Run kube proxy
  become: true
  become_user: root
  command: kubectl proxy
  register: kube_proxy_run
  async: 1000
  poll: 0
  when: inventory_hostname in groups['master']

#
- debug: var=kube_proxy_run
  when: inventory_hostname in groups['master']


#
- name: Pause for 1 minutes to wait for compleiting to start kube proxy
  pause:
    seconds: 30
  when: inventory_hostname in groups['master']

#
- name: Set port forwarding if access from other client hosts
  become: true
  become_user: root
  command: kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard --address 0.0.0.0 "{{ external_dashboard_port }}":"{{ internal_dashboard_port }}"
  register: port_forwarding_set
  async: 1000
  poll: 0
  when: inventory_hostname in groups['master']
  # OK after pause - shell: nohup kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard --address 0.0.0.0 10443:443 > /var/log/k8s_dashboard.log 2>&1 &
  # shell: nohup kubectl port-forward -n kubernetes-dashboard service/kubernetes-dashboard --address 0.0.0.0 '{{ external_dashboard_port }}':'{{ internal_dashboard_port }}' </dev/null >/dev/null 2>&1 &

#
- debug: var=port_forwarding_set
  when: inventory_hostname in groups['master']
#  shell: nohup python -mSimpleHTTPServer </dev/null >/dev/null 2>&1 &
