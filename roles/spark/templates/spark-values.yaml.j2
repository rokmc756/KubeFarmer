---
master:
  containerPorts:
    http: 8080
    https: 8480
    cluster: 7077
  automountServiceAccountToken: false
  daemonMemoryLimit: ""
  configOptions: ""
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  updateStrategy:
    type: RollingUpdate
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  resourcesPreset: "small"
  networkPolicy:
    enabled: true
    allowExternal: true
    allowExternalEgress: true
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""


worker:
  containerPorts:
    http: 8080
    https: 8480
    cluster: ""
  automountServiceAccountToken: false
  daemonMemoryLimit: ""
  memoryLimit: ""
  coreLimit: ""
  dir: ""
  javaOptions: ""
  configOptions: ""
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  replicaCount: 4
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  priorityClassName: ""
  schedulerName: ""
  terminationGracePeriodSeconds: ""
  resourcesPreset: "small"
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: 5
    targetCPU: 50
    targetMemory: ""


security:
  passwordsSecretName: ""
  rpc:
    authenticationEnabled: false
    encryptionEnabled: false
  storageEncryptionEnabled: false
  certificatesSecretName: ""
  ssl:
    enabled: false
    needClientAuth: false
    protocol: TLSv1.2
    existingSecret: ""
    autoGenerated: false
    keystorePassword: ""
    truststorePassword: ""
    resourcesPreset: "small"


service:
  type: ClusterIP
  ports:
    http: 80
    https: 443
    cluster: 7077
  externalTrafficPolicy: Cluster


ingress:
  enabled: false
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: spark.local
  ingressClassName: ""
  path: /
  tls: false
  selfSigned: false


serviceAccount:
  create: true
  automountServiceAccountToken: false


metrics:
  enabled: false
  masterAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
  workerAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
  podMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
  prometheusRule:
    enabled: false
    namespace: ""


