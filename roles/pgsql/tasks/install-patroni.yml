---
- name: Create Directory for Persistent Volumes
  file:
    path: "{{ pgsql.patroni.storage_path }}"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_pv_dir }}
  when: print_debug == true


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ pgsql.patroni.namespace }}
  register: create_namespace
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "patroni-storage-class.yaml"
    - "patroni-storage-pv.yaml"
    - "patroni-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  with_items:
    - "patroni-storage-class.yaml"
    - "patroni-storage-pv.yaml"
    - "patroni-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_pvc }}
  when: print_debug == true


#- name: Copy Patroni Helm Config Yaml
#  template:
#    src: "{{ item }}.j2"
#    dest: "{{ base_path }}/{{ item }}"
#  register: copy_patroni_lb_config_yaml
#  with_items:
#    - "pgsql-patroni-values.yaml"
#- debug: msg={{ copy_patroni_lb_config_yaml }}


- name: Generate Patroni Helm Config
  shell:
    helm inspect values bitnami/postgresql > {{ base_path }}/pgsql-patroni-values.yaml
  register: gen_patroni_helm_config
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ gen_patroni_helm_config }}
  when: print_debug == true


- name: Replace lines for Patroni Helm Config
  lineinfile:
    dest: "{{ base_path }}/pgsql-patroni-values.yaml"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  register: replace_patroni_values_lines
  with_items:
    - { regexp: '^architecture: standalone',        line: 'architecture: replication',                              state: present }
    - { regexp: '^  numSynchronousReplicas:*',      line: '  numSynchronousReplicas: {{ pgsql.patroni.replica }}',  state: present }
    - { regexp: '^  replicaCount:*',                line: '  replicaCount: {{ pgsql.patroni.replica }}',            state: present }
    - { regexp: '^    password:*',                  line: '    password: "changeme"',             state: present }
    - { regexp: '^    postgresPassword:*',          line: '    postgresPassword: "changeme"',     state: present }
    - { regexp: '^    replicationPassword:*',       line: '    replicationPassword: "changeme"',  state: present }
    - { regexp: '^      postgresPassword:*',        line: '      postgresPassword: "changeme"',   state: present }
    - { regexp: '^      password:*',                line: '      password: "changeme"',           state: present }
    - { regexp: '^      username:*',                line: '      username: "jomoon"',             state: present }
    - { regexp: '^      database:*',                line: '      database: "patroni_testdb"',     state: present }
    - { regexp: '^  postgresPassword:*',            line: '  postgresPassword: "changeme"',       state: present }
    - { regexp: '^  password:*',                    line: '  password: "changeme"',               state: present }
    - { regexp: '^  username:*',                    line: '  username: "jomoon"',                 state: present }
    - { regexp: '^  database:*',                    line: '  database: "patroni_testdb"',         state: present }
- debug: msg={{ replace_patroni_values_lines  }}
  when: print_debug == true


#- name: Replace lines for Patroni Helm Config to Enable Standby
#  replace:
#    dest: "{{ base_path }}/pgsql-patroni-values.yaml"
#    regexp: "{{ item.regexp }}"
#    replace: "{{ item.replace }}"
#  register: replace_patroni_values_standby_lines
#  with_items:
#    - { regexp: '^  standby:\n    enabled: false', replace: '  standby:\n    enabled: true', state: present }
#- debug: msg={{ replace_patroni_values_standby_lines  }}
#  when: print_debug == true


- name: Deploy Patroni Cluster
  shell:
    helm install patroni bitnami/postgresql -n {{ pgsql.patroni.namespace }} -f {{ base_path }}/pgsql-patroni-values.yaml
  register: deploy_patroni
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_patroni }}
  when: print_debug == true


- name: Validate if Patroni Containers are Running Normally
  shell: |
    kubectl -n {{ pgsql.patroni.namespace }} get pods | sed 1d | grep patroni-postgresql-read | awk '{print $3}' | grep Running | wc -l
  register: check_patroni_container
  until: pgsql.patroni.replica|int == check_patroni_container.stdout|int
  retries: 60
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_patroni_container }}
  when: print_debug == true

