---
#
- name: Check if minio client binary is already existed
  stat: path={{ minio.client_bin }}
  register: mc_bin_exists

#
- debug: msg={{ mc_bin_exists }}

#
- name: Copy minio client binary from local directory, roles/minio/files
  copy: src=mc-{{ minio.release_date }}.tar.gz dest=/tmp/mc-{{ minio.release_date }}.tar.gz mode=0644 owner=root group=root
  register: mc_local_copy
  when: mc_bin_exists.stat.exists == false and minio.download == false

#
- name: Unarchive minio client gzip file
  unarchive:
    src: "/tmp/mc-{{ minio.release_date }}.tar.gz"
    dest: "/usr/local/bin"
    owner: "root"
    group: "root"
    mode: "0755"
    remote_src: yes
    # extra_opts:
    #- --transform
    #- s/^xxx/yyy/
  register: mc_unarchive
  when: mc_bin_exists.stat.exists == false and minio.download == false

#
- name: Download minio client
  get_url:
    url: "{{ minio.client_url }}"
    dest: "{{ minio.client_bin }}"
    checksum: "{{ minio.client_checksum | d(omit) }}"
    mode: 0755
    timeout: 20
  when: ( minio.client_url.endswith('mc') or minio.client_url.endswith('Z') ) and ( mc_bin_exists.stat.exists == false and minio.download == true )

#
- name: Install unzip
  yum: name=unzip
  when: minio.client_url.endswith('zip') and ( mc_bin_exists.stat.exists == false and minio.download == false )

#
- name: Unarchive minio client
  unarchive:
    src: "{{ minio.client_url }}"
    dest: "{{ minio.client_bin | dirname }}"
    remote_src: "{{ minio.client_url.startswith('http') }}"
    mode: 0755
  when: minio.client_url.endswith('zip') and ( mc_bin_exists.stat.exists == false and minio.download == false )

#
- name: Install sudo
  yum: name=sudo
  when: minio.user != 'root'

#
- name: Fix ownership for /home/{{ minio.user }}
  file: path=/home/{{ minio.user }}/.ansible/tmp state=directory mode=0700 owner={{ minio.user }} group={{ minio.user }}

#
- name: Add minio server to client config
  become: yes
  become_user: "{{ minio.user }}"
  command: "{{ minio.client_bin }} --insecure config host add minio https://{{ ansible_host | default('localhost') }}:{{ minio.port }} {{ minio.access_key }} {{ minio.secret_key }}"
  args:
    creates: "{{ minio.client_config }}"

#
- block:
    - name: Create minio admin service
      copy:
        content: |
          [Unit]
          Description=Check minio {{ minio.service }} heal
          [Service]
          WorkingDirectory={{ minio.user_home }}
          User={{ minio.user }}
          Type=oneshot
          ExecStart={{ minio.client_bin }} admin heal -r minio
        dest: /usr/lib/systemd/system/{{ minio.service }}-check.service
      notify: systemd daemon-reload

    - name: Create timer for minio admin service
      copy:
        content: |
          [Unit]
          Description=Run minio {{ minio.service }} heal check
          [Timer]
          OnCalendar={{ minio.check_calendar | d('weekly') }}
        dest: /usr/lib/systemd/system/{{ minio.service }}-check.timer

    - name: Start minio admin service timer
      systemd: name={{ minio.service }}-check.timer state=started enabled=yes daemon_reload=yes

    - name: Check cluster status
      become: yes
      become_user: "{{ minio.user }}"
      command: "{{ minio.client_bin }} admin info minio --json"
      changed_when: no
      register: info
      until: "(info.stdout_lines | map('from_json') | map(attribute='storage.backend.offlineDisks') | sum) == 0"
      retries: 5
      delay: 10
  when:
    - minio.client_admin_host in [ansible_default_ipv4.address, 'localhost', ansible_hostname, ansible_nodename, ansible_host]

