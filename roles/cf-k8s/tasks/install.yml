---
#- name: Register Region
#  command: echo {{ alicloud_region }}
#  register: region

# https://www.devopsschool.com/blog/getting-started-with-cloud-foundry-for-kubernetes-using-cf-for-k8s-in-linuxubuntu/

- name: Download Kind CLI from GitHub
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  register: download_kind_cli
  with_items:
    - { url: "{{ kind.cli.download_url }}/v{{ kind.cli.major_version }}.{{ kind.cli.minor_version }}.{{ kind.cli.patch_version }}/kind-linux-amd64", dest: "/usr/local/bin/kind", mode: "0755" }
- debug: msg={{ download_kind_cli }}


- name: Install Kapp
  shell: |
    wget -O- https://carvel.dev/install.sh | bash
  register: install_kapp
- debug: msg={{ install_kapp }}


- name: Download YTT CLI from GitHub
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  register: download_ytt_cli
  with_items:
    - { url: "{{ ytt.cli.download_url }}/v{{ ytt.cli.major_version }}.{{ ytt.cli.minor_version }}.{{ ytt.cli.patch_version }}/ytt-linux-amd64", dest: "/usr/local/bin/ytt", mode: "0755" }
- debug: msg={{ download_ytt_cli }}


- name: Download Bosh CLI from GitHub
  get_url:
    url: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  register: download_bosh_cli
  with_items:
    - { url: "{{ bosh.cli.download_url }}/v{{ bosh.cli.major_version }}.{{ bosh.cli.minor_version }}.{{ bosh.cli.patch_version }}/bosh-cli-{{ bosh.cli.major_version }}.{{ bosh.cli.minor_version }}.{{ bosh.cli.patch_version }}-linux-amd64", dest: "/usr/local/bin/bosh", mode: "0755" }
- debug: msg={{ download_bosh_cli }}


- name: Download CF CLI from GitHub
  unarchive:
    src: "{{ item.url }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
    remote_src: yes
  register: download_cf_cli
  with_items:
    - { url: "{{ cf.cli.download_url }}/v{{ cf.cli.major_version }}.{{ cf.cli.minor_version }}.{{ cf.cli.patch_version }}/cf8-cli_{{ cf.cli.major_version }}.{{ cf.cli.minor_version }}.{{ cf.cli.patch_version }}_linux_x86-64.tgz", dest: "/usr/local/bin/", mode: "0755" }
- debug: msg={{ download_cf_cli }}


- name: Execute Bosh and CF CLI
  shell: |
    {{ item }}
  register: execute_cli
  with_items:
    - "bosh -v"
    - "cf -v"
    - "kapp --version"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ execute_cli }}


- name: Check if CF-For-K8S is Already Downloaded
  stat: path={{ base_path }}/cf-for-k8s
  register: cf_k8s_dir
- debug: msg={{ cf_k8s_dir }}


# \
# --branch v{{ cf_k8s.major_version }}.{{ cf_k8s.minor_version }}.{{ cf_k8s.patch_version }}
- name: Clone CF-For-K8S
  shell: |
    git -C "{{ base_path }}" clone https://github.com/cloudfoundry/cf-for-k8s.git
  register: clone_cf_k8s
  ignore_errors: yes
  when: cf_k8s_dir.stat.exists == false
- debug: msg={{ clone_cf_k8s }}
  when: cf_k8s_dir.stat.exists == false



- name: Generate Yaml used to deploy CF for K8S
  shell: |
    ./hack/generate-values.sh -d vcap.me > ./cf-install-values.yml
  register: generate_cf_k8s_yaml
  args:
    chdir: "{{ base_path }}/cf-for-k8s/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ generate_cf_k8s_yaml }}


# to the bottom of the ./cf-install-values.yml replacing with your information. You can copy/paste or use the following command.
- name: Append the app_registry credentials to your DockerHub registry
  lineinfile:
    path: "{{ base_path }}/cf-for-k8s/cf-install-values.yml"
    line: '{{item}}'
    state: present
  loop:
    - "app_registry:"
    - "  hostname: https://index.docker.io/v1/"
    - "  repository_prefix: \"devopsschools\""
    - "  username: \"devopsschools\""
    - "  password: \"d6b938ab-4bf2-4b49-b7c9-ddddddddd\""
  register: append_cred_app_registry
- debug: msg={{ append_cred_app_registry }}


- name: Add a metrics server because kind does not come with one
  lineinfile:
    path: "{{ base_path }}/cf-for-k8s/cf-install-values.yml"
    line: '{{item}}'
    state: present
  loop:
    - "add_metrics_server_components: true"
    - "enable_automount_service_account_token: true"
    - "metrics_server_prefer_internal_kubelet_address: true"
    - "remove_resource_requirements: true"
    - "use_first_party_jwt_tokens: true"
    - ""
    - ""
    - "load_balancer:"
    - "  enable: false"
  register: add_metrics_server
- debug: msg={{ add_metrics_server }}


- name: Render the final Kubernetes template to raw Kubernetes configuration
  shell: |
    ytt -f config -f ./cf-install-values.yml > ./cf-for-k8s-rendered.yml
  register: render_final_k8s_template
  args:
    chdir: "{{ base_path }}/cf-for-k8s"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ render_final_k8s_template }}


- name: Deploy CF for K8S
  shell: |
    kapp deploy -a cf -f ./cf-for-k8s-rendered.yml -y
    kapp list
  register: deploy_cf_for_k8s
  args:
    chdir: "{{ base_path }}/cf-for-k8s"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_cf_for_k8s }}


