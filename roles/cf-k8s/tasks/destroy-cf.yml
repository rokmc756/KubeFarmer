- name: Destroy CF for K8S
  shell: |
    kapp delete -a cf -y
  register: destroy_cf_for_k8s
  args:
    chdir: "{{ base_path }}/cf-for-k8s"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ destroy_cf_for_k8s }}


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}
  when: print_debug == true


- name: Delete Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl delete -f {{ item }}
  register: delete_pvc
  with_items:
    - "local-storage-pvc.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-class.yaml"
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ delete_pvc }}
  when: print_debug == true


- name: Delete Namespace for Persistent Volumes
  shell: |
    kubectl delete namespace {{ item }}
  register: delete_namespace
  with_items:
    - cf-blobstore
    - cf-db
- debug: msg={{ delete_namespace }}
  when: print_debug == true

# --version 3.8.2
#- name: Destroy Metrics Server
#  shell: |
#    /usr/local/bin/helm uninstall metrics-server -n kube-system
#  register: destroy_metrics_server
#  args:
#    chdir: "{{ base_path }}/"
#- debug: msg={{ destroy_metrics_server }}
#  when: print_debug == true


- name: Delete Metrics Server Config Yaml
  file:
    path: "{{ base_path }}/{{ item }}"
    state: absent
  register: delete_metrics_server_config_yaml
  with_items:
    - "metrics-server-values.yaml"
- debug: msg={{ delete_metrics_server_config_yaml }}


- name: Check if CF-For-K8S is Already Downloaded
  stat: path={{ base_path }}/cf-for-k8s
  register: cf_k8s_dir
- debug: msg={{ cf_k8s_dir }}
  when: print_debug == true


- name: Delete Directory for Persistent Volumes
  file:
    path: "{{ cf_k8s.storage_path }}"
    state: absent
  register: delete_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
  when: cf_k8s_dir.stat.exists == true
- debug: msg={{ delete_pv_dir }}
  when: print_debug == true and cf_k8s_dir.stat.exists == true



