---
# Destroy Kubernetes Cluster

#- name: YUM Version Clear
#  command: yum versionlock clear
#  register: yum_version_clear
#  ignore_errors: yes


#- name: Uninstall the latest version of a Docker-CE Package.
#  become: true
#  become_user: root
#  yum:
#    name: "{{ item }}"
#    state: absent
#  ignore_errors: yes
#  with_items:
#    - haproxy
#    - etcd
#    - firewalld
#  when: uninstall_dep_packages


- name: Reset Kubernetes
  command: kubeadm reset -f
  when: inventory_hostname in groups['master']


- name: Disable and Stop Docker
  systemd:
    name: docker
    state: stopped
    enabled: no
  register: docker_stopped
  until: docker_stopped is succeeded


- name: Disable and Stop Containerd
  systemd:
    name: containerd
    state: stopped
    enabled: no
  register: containerd_stopped
  until: containerd_stopped is succeeded


#- name: Kill Processes Regarding Containerd
#  shell: |
#    kill -9 `ps -ef | grep containerd | awk '{print $2}'`
#  register: containerd_killed
#  ignore_errors: yes
#- debug: msg={{ containerd_killed }}


- name: Disable and Stop Kubelet
  systemd:
    name: kubelet
    state: stopped
    enabled: no
  register: kubelet_stopped
  until: kubelet_stopped is succeeded


# Uninstall Containerd.io Package to Manages the Complete Container Lifecycle from Image Transfer
# and Storage to Container Execution and Supervision to Low-Level Storage
- name: Uninstall the Latest Version of Docker-CE Package.
  yum:
    name: "{{ item }}"
    state: absent
  with_items: "{{ rh_docker_pkgs }}"
  when: uninstall_dep_pkgs and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- name: Uninstall the Latest Version of Docker-CE Package.
  yum:
    name: "{{ item }}"
    state: absent
  with_items: "{{ suse_ce_pkgs }}"
  when: uninstall_dep_pkgs and ansible_distribution == "openSUSE Leap"


#- name: Launch Kubernetes Software
#  import_tasks: config-rh-kube-software.yml
#  tags: install
#  when: config_kube_software and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- name: Uninstall Kubeadm Package
  yum:
    name: "{{ item }}"
    state: absent
  register: kube_pkgs_uninstalled
  until: kube_pkgs_uninstalled is succeeded
  with_items:
    - "kubeadm"
    - "kubelet"
    - "kubectl"
  when: uninstall_k8s_packages


- name: Delete Kube Directories
  file:
    path: "{{ item }}"
    state: absent
  register: kube_dir_removed
  ignore_errors: true
  with_items:
    - "/etc/kubernetes/pki/ca.crt"
    - "/usr/lib/systemd/system/kubelet.service"
    - "/etc/kubernetes/kubelet.conf"
    - "/etc/docker"
    - "/var/lib/docker"
    - "/etc/sysconfig/kubelet"
    - "/etc/sysctl.d/99-kubernetes-cir.conf"
    - "/etc/cni/net.d/*"
    - "$HOME/.kube"
    - "/var/lib/docker/overlay2"
    - "/var/lib/docker/devicemapper"
    - "/var/lib/docker/containers"
    - "{{ k8s.base_path }}/.docker"
    - "/root/calico.yaml"
    - "/etc/containerd/config.toml"
    - "/etc/modules-load.d/containerd.conf"
    - "/var/lib/containerd"
    - "/var/lib/kubelet"
- debug: msg={{ kube_dir_removed }}
  when: print_debug == true


- name: Delete Kubernetes Repositories
  file:
    path: "{{ item }}"
    state: absent
  register: kubernetes_repo_deleted
  ignore_errors: yes
  with_items:
    - "/etc/yum.repos.d/kubernetes.repo"
    - "/etc/yum.repos.d/docker-ce.repo"
  when: config_kube_software == true and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )
- debug: msg={{ kubernetes_repo_deleted }}
  when: print_debug == true and config_kube_software == true and ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- name: Remove kubectl commnd in .bashrc
  lineinfile:
    path: "{{ item.file }}"
    regexp: "{{ item.regexp }}"
    state: "{{ item.state }}"
  with_items:
    - { file: "/root/.bashrc", regexp: "kubectl completion bash", state: absent }
  register: remove_kubectl_command_bashrc
- debug: msg={{ remove_kubectl_command_bashrc }}
  when: print_debug == true


- name: Reboot required
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 120
  poll: 0
  notify:
    - Waiting for Server to Come Back After Reboot


- meta: flush_handlers

