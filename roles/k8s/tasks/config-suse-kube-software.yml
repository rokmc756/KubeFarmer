---
- name: Add Line into /etc/locale.conf for LC_TYPE to Prevent Error
  lineinfile:
    path: /etc/locale.conf
    line: "LC_CTYPE=en_US.UTF-8"
  register: add_lctype_line
- debug: msg={{ add_lctype_line }}
  when: print_debug == true


- name: Unset Variables of Token and Certs Generated Previously by Kubeadm Init
  set_fact:
    k8s_token_ca_cert:
    k8s_token:


- name: Enable br_netfilter and Overlay Module for iptables
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
  register: enable_iptables_kernel_modules
- debug: msg={{ enable_iptables_kernel_modules }}
  when: print_debug == true


- name: Enable Bridge Module for IPTables to Route Packets into Kubernetes Cluster Nodes
  template: src=sysctl-k8s.conf.j2 dest=/etc/sysctl.d/sysctl-k8s.conf owner=root group=root mode=644 force=yes
  register: enable_kernel_modules
- debug: msg={{ enable_kernel_modules }}
  when: print_debug == true


- name: Apply Kernel Parameters for Kubernetes Cluster
  command: sysctl --system
  register: apply_kernel_params
- debug: msg={{ apply_kernel_params }}
  when: print_debug == true


- name: Initialize Containerd
  shell: |
    containerd config default > /etc/containerd/config.toml
  register: init_containerd
- debug: msg={{ init_containerd }}
  when: print_debug == true



- name: Edit Containerd Configuration
  lineinfile:
    dest: /etc/containerd/config.toml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  register: edit_containerd_config
  with_items:
    - { regexp: '            SystemdCgroup = false', line: '            SystemdCgroup = true', state: present, backrefs: no }
- debug: msg={{ edit_containerd_config }}
  when: print_debug == true


- name: Start Container Runtime to Apply Changes in config.toml
  systemd:
    name: containerd
    state: started
    enabled: yes
    daemon_reload: yes
  register: start_containerd
  until: start_containerd is succeeded
  retries: 20
  delay: 10
- debug: msg={{ start_containerd }}
  when: print_debug == true


- name: Create Docker Directory Under /etc
  file:
    path: /etc/docker
    state: directory
  register: create_docker_dir
- debug: msg={{ create_docker_dir }}
  when: print_debug == true


- name: Configure the Docker Daemon to Use Systemd for the Management of the Cotainer's CGroups
  template: src=daemon.json.j2 dest=/etc/docker/daemon.json owner=root group=root mode=644 force=yes
  register: config_docker_cgroup
- debug: msg={{ config_docker_cgroup }}
  when: print_debug == true


- name: Start Docker Daemon
  systemd:
    name: docker
    state: started
    enabled: yes
    daemon_reload: yes
  register: start_docker
  until: start_docker is succeeded
  retries: 10
  delay: 10
- debug: msg={{ start_docker }}
  when: print_debug == true


#- name: Configure the Kubelet Daemon to Use Systemd for the Management of the Cotainer's CGroups
#  template: src=kubelet.j2 dest=/etc/sysconfig/kubelet owner=root group=root mode=644 force=yes
#  register: kubernetes_repo_added


- name: Copy CGroup Config File
  template: src=cgconfig.conf.j2 dest=/etc/cgconfig.conf owner=root group=root mode=644 force=yes
  register: copy_cgroup_config_file
- debug: msg={{ copy_cgroup_config_file }}
  when: print_debug == true


- name: Enable CGroup
  systemd:
    name: cgconfig
    state: started
    enabled: yes
    daemon_reload: yes
  register: enable_cgroup
- debug: msg={{ enable_cgroup }}
  when: print_debug == true



- name: Lock Versions to Avoid Unwanted Updated Zypper Updates
  command: zypper addlock kubelet kubeadm kubectl
  register: lock_suse_kube_version
- debug: msg={{ lock_suse_kube_version }}
  when: print_debug == true


- name: Create Cluster Configuration in Master Node
  shell: |
    kubeadm config print init-defaults | tee /root/cluster-config.yaml
  register: create_cluster_config
  when: inventory_hostname in groups['master']
- debug: msg={{ create_cluster_config }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Modify cluster-config.yaml to Replace "{{ hostvars[inventory_hostname]['ansible_'~netdev1]['ipv4']['address'] }}" with Control Plane's IP address
  lineinfile:
    dest: /root/cluster-config.yaml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
    backrefs: "{{ item.backrefs }}"
  register: modify_cluster_config
  with_items:
    - { regexp: "^  name: node", line: "  name: {{ ansible_hostname }}", state: present, backrefs: yes }
    - { regexp: "^  advertiseAddress: 1.2.3.4", line: "  advertiseAddress: {{ hostvars[inventory_hostname]['ansible_'~netdev1]['ipv4']['address'] }}", state: present, backrefs: yes }
    - { regexp: "^  criSocket: /var/run/dockershim.sock", line: "  criSocket: /run/{{ container_runtime }}/{{ container_runtime }}.sock", state: present, backrefs: yes }
  when: inventory_hostname in groups['master']
- debug: msg={{ modify_cluster_config }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Modify cluster-config.yaml
  lineinfile:
    path: /root/cluster-config.yaml
    line: "{{ item.content }}"
    insertafter: EOF
    create: true
  register: modify_cluster_config
  with_items:
    - { content: '---' }
    - { content: 'apiVersion: kubelet.config.k8s.io/v1beta1' }
    - { content: 'kind: KubeletConfiguration' }
    - { content: 'cgroupDriver: systemd' }
  when: inventory_hostname in groups['master']
- debug: msg={{ modify_cluster_config }}
  when: print_debug == true and inventory_hostname in groups['master']



- name: Disable SWAP in Order to initialize Kubernetes Master
  shell: |
    swapoff -a
    sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
  register: disable_swap
- debug: msg={{ disable_swap }}
  when: print_debug == true



#- name: Move temoporary Kubelet systemd file in recursive directory of /usr/lib/systemd/system/kubelet.service.d to /tmp directory
#  shell: mv -f /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf /tmp/
#  register: kubeadm_conf_moved


#- name: Change Kubelet Systemd File
#  template: src=kubelet.systemd.j2 dest=/usr/lib/systemd/system/kubelet.service owner=root group=root mode=644 force=yes
#  register: kubelet_systemd_changed


- name: Add Kubelet Args Line
  lineinfile:
    dest: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
    line: "Environment=\"KUBELET_EXTRA_ARGS=--fail-swap-on=false\""
    state: present
  register: add_kubelet_args_line
- debug: msg={{ add_kubelet_args_line }}
  when: print_debug == true


- name: Replace a Line to Comment Conflict for Docker and Containerd
  lineinfile:
    dest: /usr/lib/systemd/system/containerd.service
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  register: replace_conflict_line
  with_items:
    - { regexp: '^Conflicts=docker.service', line: '#Conflicts=docker.service', state: present }
- debug: msg={{ replace_conflict_line }}
  when: print_debug == true


- name: Start Container Runtime to Apply Changes in config.toml
  systemd:
    name: "{{ container_runtime }}"
    state: started
    enabled: yes
    daemon_reload: yes
  register: start_cr
  until: start_cr is succeeded
  retries: 20
  delay: 10
- debug: msg={{ start_cr }}
  when: print_debug == true


- name: Enable and Start Kubelet
  systemd:
    name: kubelet
    state: started
    enabled: yes
    daemon_reload: yes
  register: start_kubelet
  until: start_kubelet is succeeded
  retries: 20
  delay: 10
- debug: msg={{ start_kubelet }}
  when: print_debug == true


