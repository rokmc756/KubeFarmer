---
####################################################################################################################################################################
# Define Facts for Network and IP Address Informatins Corresponding to Network Device Name
####################################################################################################################################################################
- name: Get Network Interface Names from Prefix of IP Addresses Provided for Kubernetes Nodes
  set_fact:
    netdev0: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', k8s.net.ipaddr0 ) | map(attribute='device') | first }}"
    netdev1: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', k8s.net.ipaddr1 ) | map(attribute='device') | first }}"
    netdev2: "{{ ansible_interfaces | map('regex_replace', '^', 'ansible_') | map('extract', vars) | selectattr('ipv4', 'defined') | selectattr('ipv4.address', 'match', k8s.net.ipaddr2 ) | map(attribute='device') | first }}"


- name: Get IP Address From Provided Network Device Names
  set_fact:
    ipaddr0: "{{ hostvars[inventory_hostname]['ansible_'~netdev0].ipv4.address }}"
    ipaddr1: "{{ hostvars[inventory_hostname]['ansible_'~netdev1].ipv4.address }}"
    ipaddr2: "{{ hostvars[inventory_hostname]['ansible_'~netdev2].ipv4.address }}"


- name: Set Default Network Device and Address
  set_fact:
    _netdev: "{{ 'ansible_'~ netdev1 }}"
    _ipaddr: "{{ ipaddr1 }}"
    _netdev0: "{{ 'ansible_'~ netdev0 }}"
    _netdev1: "{{ 'ansible_'~ netdev1 }}"
    _netdev2: "{{ 'ansible_'~ netdev2 }}"


- name: Get Netmask From Provided Network Device Names
  set_fact:
    netmask0: "{{ ( hostvars[inventory_hostname][_netdev0]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev0]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask1: "{{ ( hostvars[inventory_hostname][_netdev1]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev1]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"
    netmask2: "{{ ( hostvars[inventory_hostname][_netdev2]['ipv4']['address'] + '/' + hostvars[inventory_hostname][_netdev2]['ipv4']['netmask'] ) | ansible.utils.ipaddr('prefix') }}"


# https://stackoverflow.com/questions/36328907/ansible-get-all-the-ip-addresses-of-a-group
#- name: Define Facts for All Worker's Hostname
#  all_ext1_hostnames: "{{ groups['all'] | map('extract', hostvars, ['ansible_hostname']) | join(' ') }}"
#  all_net0_ipaddrs: "{{ groups['all'] | map('extract', hostvars, ['ansible_'~netdev0, 'ipv4', 'address']) | join(',') }}"



####################################################################################################################################################################
# Define Facts for all Packages List to be Installed Corresponding to Linux Distribution
####################################################################################################################################################################
- set_fact:
    rh_install_pks: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh7_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int <= 7
- set_fact:
    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh8_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int == 8
- set_fact:
    rh_install_pkgs: "{{ rh_common_pkgs ~ ',' ~ rh_common_devel_pkgs  ~ ',' ~ rh9_common_devel_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" ) and ansible_distribution_major_version|int >= 9
- set_fact:
    install_pkgs: "{{ rh_install_pkgs }}"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )


- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt20_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int <= 20
- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt22_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int == 22
- set_fact:
    ubt_install_pkgs: "{{ ubt_common_pkgs ~ ',' ~ ubt_common_devel_pkgs  ~ ',' ~ ubt23_common_devel_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" ) and ansible_distribution_major_version|int >= 23
- set_fact:
    install_pkgs: "{{ ubt_install_pkgs }}"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )


- set_fact:
    suse_install_pkgs: "{{ suse_common_pkgs ~ ',' ~ suse_common_devel_pkgs  ~ ',' ~ suse15_common_devel_pkgs }}"
  when: ansible_distribution == "openSUSE Leap" and ansible_distribution_major_version|int <= 15
- set_fact:
    install_pkgs: "{{ suse_install_pkgs }}"
  when: ansible_distribution == "openSUSE Leap"



#############################################################################################################################################
# Define Variables for Commands of each Linux Distributions for Update Package Caches, Docker Command, Version Lock and Unlock
#############################################################################################################################################
- set_fact:
    update_repo_cache: "dnf makecache"
    docker_pkgs: "{{ rh_docker_pkgs }}"
    lock_kube_cmds: "yum versionlock kubelet kubeadm kubectl"
    unlock_kube_cmds: "yum versionlock clear kubelet kubeadm kubectl"
  when: ( ansible_distribution == "RedHat" or ansible_distribution == "CentOS" or ansible_distribution == "Rocky" )

- set_fact:
    update_repo_cache: "apt update"
    docker_pkgs: "{{ ubt_docker_pkgs }}"
    lock_kube_cmds: "apt-mark hold kubelet kubeadm kubectl"
    unlock_kube_cmds: "apt-mark unhold kubelet kubeadm kubectl"
  when: ( ansible_distribution == "Ubuntu" or ansible_distribution == "Debian" )

- set_fact:
    update_repo_cache: "zypper refresh -B"
    docker_pkgs: "{{ suse_docker_pkgs }}"
    lock_kube_cmds: "zypper addlock kubelet kubeadm kubectl"
    unlock_kube_cmds: "zypper removelock kubelet kubeadm kubectl"
  when: ansible_distribution == "openSUSE Leap"



#############################################################################################################################################
# Setup MTU Values According to Network Type
#############################################################################################################################################
- set_fact:
    cni_mtu: "{{ k8s.cni.calico.vxlan.mtu }}"
  when: k8s.cni.calico.install == true and k8s.cni.calico.vxlan.enable == true
- set_fact:
    cni_mtu: "{{ k8s.cni.calico.ipip.mtu }}"
  when: k8s.cni.calico.install == true and k8s.cni.calico.ipip.enable == true
- set_fact:
    cni_mtu: "{{ k8s.cni.tigera.vxlan.mtu }}"
  when: k8s.cni.tigera.install == true and k8s.cni.tigera.vxlan.enable == true
- set_fact:
    cni_mtu: "{{ k8s.cni.tigera.ipip.mtu }}"
  when: k8s.cni.tigera.install == true and k8s.cni.tigera.ipip.enable == true
- set_fact:
    cni_mtu: "{{ k8s.cni.kube_flannel.mtu }}"
  when: k8s.cni.kube_flannel.install == true



#############################################################################################################################################
# Get NVME List
#############################################################################################################################################
- name: Get NVME Devices
  shell: |
    nvme list | sed 1,2d | awk '{print $1}' | cut -d "/" -f 3
  register: nvme_device_list
- debug: msg={{ nvme_device_list.stdout_lines }}
  when: print_debug == true


- name: Get Number of NVME Devices
  set_fact:
    nvme_device_count: "{{ nvme_device_list.stdout_lines | length }}"
- debug: msg={{ nvme_device_count }}
  when: print_debug == true


- name: Set Volume Facts with List
  set_fact:
    volume_mode: "{{ volume_modes | list }}"
  vars:
    volume_modes:
      - "Filesystem"
      - "Block"
      - "Block"
      - "Block"
- debug: msg={{ volume_mode }}
  when: print_debug == true


- name: Set Facts after Merging Volume Mode with NVME Device Name
  set_fact:
    nvme_merge_info0: "{{ volume_mode | zip(nvme_device_list.stdout_lines) }}"
- debug: msg={{ nvme_merge_info0 }}
  when: print_debug == true


- name: Set Each Facts with Dictionary to Combile Hostname and Devices Names
  set_fact:
    nvme_merge_info: "{{ dict([ inventory_hostname ] | zip( [ nvme_merge_info0 ] )) | dict2items( key_name='hostname', value_name='devinfo' ) }}"
- debug: msg={{ nvme_merge_info }}
  when: print_debug == true


- name: Set a Facts Merging Dictionaries with NVME Info
  set_fact:
    all_nvme_info: "{{ groups['workers'] | map('extract', hostvars, ['nvme_merge_info']) | join(' ') }}"
- debug: msg={{ all_nvme_info }}
  when: print_debug == true

