---
- name: Drain Slave Master Nodes
  shell: |
    kubectl drain {{ item }} --ignore-daemonsets --delete-local-data
  register: drain_slave_master
  with_items: "{{ groups['slaves'] }}"
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ drain_slave_master }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Delete Slave Master Nodes
  shell: |
    kubectl delete node {{ item }}
  register: delete_slave_master
  with_items: "{{ groups['slaves'] }}"
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ delete_slave_master }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Get List of ETCD ID
  shell:
    cmd: |
      cat <<EOF | kubectl exec -i -n kube-system $(kubectl get pods -n kube-system | grep {{ inventory_hostname }} ) -- sh
      etcdctl -w table member list --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
      EOF
  register: get_etcd_id_list
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ get_etcd_id_list.stdout_lines }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Set ETCD ID
  set_fact:
    etcd_id: "{{ ( get_etcd_id_list.stdout_lines | select('search', hostvars[item].ansible_hostname ) | list | string | split('|') )[1] | regex_replace(' ','') }}"
  ignore_errors: true
  with_items: "{{ groups['slaves'] }}"
  when: inventory_hostname in groups['master']
- debug: msg={{ etcd_id }}
  ignore_errors: true
  when: print_debug == true and inventory_hostname in groups['master']


- name: Delete ETCD ID
  shell:
    cmd: |
      cat <<EOF | kubectl exec -i -n kube-system $(kubectl get pods -n kube-system | grep {{ inventory_hostname }} ) -- sh
      etcdctl member remove {{ etcd_id }} --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
      EOF
  register: delete_etcd_id
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ delete_etcd_id }}
  ignore_errors: true
  when: print_debug == true and inventory_hostname in groups['master']


- name: Get List of ETCD ID
  shell:
    cmd: |
      cat <<EOF | kubectl exec -i -n kube-system $(kubectl get pods -n kube-system | grep {{ inventory_hostname }}) -- sh
      etcdctl -w table member list --cacert /etc/kubernetes/pki/etcd/ca.crt --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
      EOF
  register: get_etcd_id_list
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ get_etcd_id_list }}
  ignore_errors: true
  when: print_debug == true and inventory_hostname in groups['master']


- name: Reset Kubernetes
  shell: 
    kubeadm reset --cri-socket=/var/run/crio/crio.sock -f
    kubeadm reset -f
  ignore_errors: true
  when: inventory_hostname in groups['slaves']


- name: Modify ControlPlaneEndpoint
  shell: |
    kubectl get configmap kubeadm-config -n kube-system -o yaml | \
    sed -e "/^    controlPlaneEndpoint: {{ hostvars[groups['master'][0]][_netdev]['ipv4']['address'] }}:6443$/d" | \
    kubectl apply -f - -n kube-system
  register: modify_endpoint
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ modify_endpoint }}
  ignore_errors: true
  when: print_debug == true and inventory_hostname in groups['master']


- name: Confirm that the Kubectl Command is Activated
  command: kubectl get nodes
  register: kubectl_get_nodes
  ignore_errors: true
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  ignore_errors: true
  when: print_debug == true and inventory_hostname in groups['master']


# 제거할 node가 master인 경우
# multi master에선 etcd에 정보가 동기화 되어 있기 때문에 node제거 후, etcd member에서 제거해야 합니다.
# 제거된 node의 etcd가 메인이 되면 apiserver가 존재하지 않아 통신이 불가능하고 데이터 일관성이 깨질 수 있게 됩니다. 자세한 내용은 RAFT 알고리즘을 참조해주세요.
# 0. 제거할 노드들의 keepalived service를 중지합니다.
#
# $ systemctl stop keepalived
#
# 제거할 노드를 확인합니다.
# $ kubectl get nodes
#
# 노드를 클러스터에서 제거합니다.
# $ kubectl delete node [node-name you want to remove from cluster]
#
# 노드가 제거 되었는지 확인합니다.
# $ kubectl get nodes
#
# keepalived를 가지고 있는 main master 노드에 접속합니다.
#
# main master의 etcd pod를 조회합니다.
# $ kubectl get pods -n kube-system | grep etcd
#
# etcd pod에 접속합니다.
# $ kubctl exec -it -n kube-system etcd-pod -- bash # bash 안되면 sh
#
# 7번부터 9번까지 명령어는 접속한 pod에서 진행됩니다. etcd member을 조회합니다.
# $ etcdctl -w table member list --cacert /etc/kubernetes/pki/etcd/ca.crt \ 
# --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
#
# etcd member list에서 제거한 master node의 etcd ID를 선택하여 제거합니다.
# $ etcdctl member remove [etcd ID] --cacert /etc/kubernetes/pki/etcd/ca.crt \ 
# --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
#
# 다시 etcd member를 조회하여 삭제가 되었는지 확인합니다.
# $ etcdctl -w table member list --cacert /etc/kubernetes/pki/etcd/ca.crt \ 
# --cert /etc/kubernetes/pki/etcd/server.crt --key /etc/kubernetes/pki/etcd/server.key
#
# 9-1. exit로 pod에서 나옵니다.
# 노드에 저장된 클러스터 정보를 초기화 하기 위해 클러스터에 제거한 노드로 접속합니다.
# 지금부터 실행되는 명령어는 접속한 노드에서 진행 되는 내용입니다.
#
# 클러스터 정보를 초기화 합니다.
#
# $ kubeadm reset --cri-socket=/var/run/crio/crio.sock⭐
# The reset process does not clean CNI configuration. To do so, you must remove /etc/cni/net.d
#
# The reset process does not reset or clean up iptables rules or IPVS tables.
# If you wish to reset iptables, you must do so manually by using the "iptables" command.
#
# If your cluster was setup to utilize IPVS, run ipvsadm --clear (or similar)
# to reset your system's IPVS tables.
#
# The reset process does not clean your kubeconfig files and you must remove them manually.
# Please, check the contents of the $HOME/.kube/config file.
# ⭐ dockershim과 cri-o가 동시에 있으면 에러가 발생할 수 있습니다.
# --cri-socket=/var/run/crio/crio.sock 옵션으로 컨테이너 런타임으로 지정하여 정상적으로 초기화 되도록 합니다.
# kubeadm reset 만 입력해도 진행되는 경우가 있지만, 완전히 리셋이 되지 않을 수 있습니다.
#
# 컨테이너 런타임이 cri-o라면 --cri-socket=/var/run/crio/crio.sock 를 사용해줍니다.
# CNI 구성파일과 kubernetes, kubelet 구성 디렉토리를 삭제합니다.
# $ rm -rf /var/lib/kubelet
# $ rm -rf /etc/kubernetes
# $ rm -rf /etc/cni/net.d
# kubeadm, kubelet, kubectl 패키지를 삭제합니다.
# $ yum(dnf) autoremove kubeadm kubelet kubectl

