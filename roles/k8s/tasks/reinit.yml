---
- name: Disable SELinux Policy
  import_tasks: disable-selinux.yml


#- name: Initialize Containerd
#  shell: |
#    mkdir /etc/containerd
#    containerd config default > /etc/containerd/config.toml


- name: Stop Services Before Reinitializating Kubernetes
  shell: |
    echo "Stop Services Before Reinitialization"
  notify:
    - Stop Docker
    - Stop Containerd
    - Stop Kubelet
    - Restart Containerd


- name: Force to Stop and Restart Services
  meta: flush_handlers


- name: Reset Kubernetes
  command: kubeadm reset -f
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['workers']


- name: Remove Directories Used by Persistenct Volumes
  import_tasks: remove-pv-dirs.yml
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['workers']


- name: Config Image Pull
  command: kubeadm config images pull
  when: inventory_hostname in groups['master']


# kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_'~netdev1]['ipv4']['address'] }} \
- name: Initialize Kubernetes Master to Create Cluster
  shell: |
    kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]][_netdev]['ipv4']['address'] }} \
    --pod-network-cidr={{ k8s.cni.pod_network }} --cri-socket=unix:///run/containerd/containerd.sock --ignore-preflight-errors=all --v=5
  async: 360
  poll: 5
  register: kubeadm_init
  when: inventory_hostname in groups['master']
- debug: msg={{ kubeadm_init }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Set Fact For Token CA Certificate
  set_fact:
    k8s_token_ca_cert: "{{ (kubeadm_init.stdout_lines | select('search', 'discovery-token-ca-cert-hash') | list | string | split(' '))[1] }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['master']
- debug: msg={{ k8s_token_ca_cert }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Set Fact For Token
  set_fact:
    k8s_token: "{{ (kubeadm_init.stdout_lines | select('search', '--token') | list | string | split(' '))[4] }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['master']
- debug: msg={{ k8s_token }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Enable User as Admin Kube Environment
  import_tasks: enable-default-kube-env.yml
  when: inventory_hostname in groups['master']


- name: Configure Kubectl Config
  shell: |
    kubectl taint nodes {{ hostvars[groups['master'][0]].ansible_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-
  register: kubectl_configured
  until: kubectl_configured is succeeded
  retries: 10
  delay: 10
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_configured }}
  when: print_debug == true and inventory_hostname in groups['master']
  # For higher than 1.26.x version  - kubectl taint nodes  {{ hostvars[groups['master'][0]].ansible_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-
  # For earlier than 1.21.x version - kubectl taint nodes --all node-role.kubernetes.io/master-


- name: Confirm that the Kubectl Command is Activated
  command: kubectl get nodes
  register: kubectl_get_nodes
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Create POD for Master As Well
  lineinfile:
    path: "{{ k8s.base_path }}/.bashrc"
    line: "{{ item.content }}"
    insertafter: EOF
    create: true
  register: master_pod_created
  with_items:
    - { content: " if [ -f /etc/bash_completion ] && ! shopt -oq posix; then " }
    - { content: "   . /etc/bash_completion " }
    - { content: " fi " }
    - { content: " source <(kubectl completion bash) " }
  when: inventory_hostname in groups['master']
- debug: msg={{ master_pod_created }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Setup CNI Networking Plugin
  import_tasks: setup-cni-plugin.yml
  when: k8s.cni.install == true and inventory_hostname in groups['master']


- name: Confirm that the Kubectl Command is Activated
  command: kubectl get nodes
  register: kubectl_get_nodes
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  when: print_debug == true and inventory_hostname in groups['master']


#- name: Reset Kubernetes on Cluster Nodes
#  command:  kubeadm reset -f
#  register: kube_cluster_reset
#  when: inventory_hostname in groups['workers']
#- debug: msg={{ kube_cluster_reset }}
#  when: print_debug == true and inventory_hostname in groups['workers']


- name: Join the Other Kubernetes Nodes to Cluster, the Command must be Run on the Worker Nodes Only
  shell: |
    kubeadm join "{{ hostvars[groups['master'][0]][_netdev]['ipv4']['address'] }}:6443" \
    --token "{{ k8s_token }}" --discovery-token-ca-cert-hash "{{ k8s_token_ca_cert }}"
  register: store_it_copied
  ignore_errors: yes
  when: inventory_hostname in groups['workers']
- debug: msg={{ store_it_copied }}
  when: print_debug == true and inventory_hostname in groups['workers']


- name: Confirm the Kubectl Command is Activated
  command: kubectl get nodes
  register: kubectl_get_nodes
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  when: print_debug == true and inventory_hostname in groups['master']


#- name: Disable and Stop Docker
#  systemd:
#    name: docker
#    state: stopped
#    enabled: no
#  register: docker_stopped
#  ignore_errors: true
#  until: docker_stopped is succeeded


#- name: Enable and Start Kubelet in Master Node
#  systemd:
#    name: kubelet
#    state: restarted
#    enabled: yes
#  register: master_kubelet_restarted
#  when: inventory_hostname in groups['master']
#- debug: msg={{ master_kubelet_restarted }}
#  when: print_debug == true and inventory_hostname in groups['master']


- name: Validate if Kubernetes Workers are All Ready
  shell: |
    kubectl get nodes
  register: check_k8s_workers_status
  until: check_k8s_workers_status.stdout.find("NotReady") == -1
  retries: 30
  when: inventory_hostname in groups['master']
- debug: msg={{ check_k8s_workers_status }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Validate if All Containers Are Running
  shell: |
    kubectl get pods --all-namespaces -o wide
  register: all_containers_running_checked
  until: all_containers_running_checked.stdout.find("ContainerCreating") == -1
  retries: 60
  when: inventory_hostname in groups['master']
- debug: msg={{ all_containers_running_checked }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Check the Status fo CNI Network Plugin
  import_tasks: check-cni-network-plugin.yml
  when: k8s.cni.install == true and inventory_hostname in groups['master']


- name: Restart Services for Kubernetes After Reinitialization
  shell: |
    echo "Restart Services After Reinitialization"
  notify:
    - Stop Firewalld
    - Restart Docker
    - Restart Containerd
    - Restart Kubelet


- name: Force to Stop and Restart Services
  meta: flush_handlers


# Calico CNI
# https://stackoverflow.com/questions/62139375/calico-ips-confusion
# https://www.skyer9.pe.kr/wordpress/?p=7317

# https://github.com/projectcalico/calico/issues/5711
# This is to do with the settings on kube-proxy. If your pod-cidr isn't in the range that's configured on kube-proxy,
# kube-proxy will NAT pod-pod traffic between different nodes, which will break network policy (though connectivity will appear to work)
# Typically you have to re-create the cluster with the correct pod-cidr defined.
# Fundamentally:
# kube-proxy and calico pod-cidr settings must agree (calico pod-cidr must be wholly within the kube-proxy cluster-cidr)
# host-cidr, pod-cidr and service-cidrs need to be disjoint (i.e. separate and non-overlapping)
#
# https://www.centlinux.com/2022/11/install-kubernetes-master-node-rocky-linux.html
