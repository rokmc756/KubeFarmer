---
# Reinit Kubernetes
- name: Unset Variables of Token and Certs Generated Previously by Kubeadm Init
  set_fact:
    k8s_token_ca_cert:
    k8s_token:


# https://k21academy.com/docker-kubernetes/container-runtime-is-not-running/
#- name: Delete config.toml
#  file:
#    path: "{{ item }}"
#    state: absent
#  register: config_toml_deleted
#  with_items:
#    - "/etc/containerd/config.toml"
#  when: ansible_distribution == "openSUSE Leap"
#- debug: msg={{ config_toml_deleted }}
#  when: print_debug and ansible_distribution == "openSUSE Leap"


#- name: Initialize Containerd
#  shell: |
#    containerd config default > /etc/containerd/config.toml


#- name: Edit Containerd Configuration
#  lineinfile:
#    dest: /etc/containerd/config.toml
#    regexp: "{{ item.regexp }}"
#    line: "{{ item.line }}"
#    state: "{{ item.state }}"
#  with_items:
#    - { regexp: '            SystemdCgroup = false', line: '            SystemdCgroup = true', state: present, backrefs: no }
#   - { regexp: 'runc.options', line: '            SystemdCgroup = true', state: present }
#     firstmatch: yes


#- name: Delete config.toml
#  file:
#    path: "{{ item }}"
#    state: absent
#  register: config_toml_deleted
#  with_items:
#    - "/etc/containerd/config.toml"
#  when: ansible_distribution == "openSUSE Leap"
#- debug: msg={{ config_toml_deleted }}
#  when: print_debug and ansible_distribution == "openSUSE Leap"


- name: Restart Container Runtime to Apply config.toml
  systemd:
    name: "{{ container_runtime }}"
    state: restarted
  register: cr_restarted
  until: cr_restarted is succeeded
  retries: 10
  delay: 10


- name: Restart Docker
  systemd:
    name: docker
    state: restarted
  register: docker_restarted
  until: docker_restarted is succeeded
  retries: 10
  delay: 10
  when: ansible_distribution == "openSUSE Leap"


- name: Set SELinux Permissive Mode
  shell: |
    setenforce 0
    sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config


#- name: Enable Masquerade on Master node
#  command: firewall-cmd --zone=public --add-masquerade --permanent
#- name: Reload firewalld for all nodes
#  command: firewall-cmd --reload


- name: Start Firewalld For All Nodes
  systemd:
    name: firewalld
    state: restarted
    enabled: yes


- name: Enable Masquerade On Master Node
  firewalld:
    masquerade: true
    state: enabled
    permanent: true
    zone: public
  when: inventory_hostname in groups['master'] or inventory_hostname in groups['workers']


- name: Reset Kubernetes Forster
  command: kubeadm reset -f
  when: inventory_hostname in groups['master']


- name: Reset Kubernetes for Workers
  command: kubeadm reset -f
  when: inventory_hostname in groups['workers']


- name: Initialize Kubernetes Master and Create Cluster
  command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_'~netdev1]['ipv4']['address'] }} --pod-network-cidr=10.142.0.0/16 --cri-socket=unix:///run/containerd/containerd.sock --ignore-preflight-errors=all
  async: 360
  poll: 5
  register: kubeadm_init
  when: inventory_hostname in groups['master']
- debug: msg={{ kubeadm_init }}
  when: print_debug == true and inventory_hostname in groups['master']
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=192.168.0.0/16 --upload-certs --v=5 --ignore-preflight-errors=all
  # command: kubeadm init --upload-certs --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=10.142.0.0/16 --ignore-preflight-errors=all
  # command: kubeadm init --config /etc/kubernetes/kubeadm.conf --upload-certs --v=5
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=10.42.0.0/16 --ignore-preflight-errors=all
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=10.10.0.0/16 --ignore-preflight-errors=all   # For kube-flannel
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=10.142.0.0/16 --ignore-preflight-errors=all
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all
  # command: kubeadm init --apiserver-advertise-address={{ hostvars[groups['master'][0]]['ansible_eth1']['ipv4']['address'] }} --pod-network-cidr=192.168.0.0/16 --ignore-preflight-errors=all


- name: Set Fact For Token CA Certificate
  set_fact:
    k8s_token_ca_cert: "{{ (kubeadm_init.stdout_lines | select('search', 'discovery-token-ca-cert-hash') | list | string | split(' '))[1] }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['master']
- debug: msg={{ k8s_token_ca_cert }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Set Fact For Token
  set_fact:
    k8s_token: "{{ (kubeadm_init.stdout_lines | select('search', '--token') | list | string | split(' '))[4] }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  when: inventory_hostname in groups['master']
- debug: msg={{ k8s_token }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Enable Your User to Start Using the Cluster.
  shell: |
    rm -f $HOME/.kube
    rm -rf /root/calico.yaml
    mkdir -p $HOME/.kube
    rm -f $HOME/.kube/config
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config
  register: start_using_cluster_enabled
  when: inventory_hostname in groups['master']
- debug: msg={{ start_using_cluster_enabled }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Configure Kubectl Config
  shell: |
    kubectl taint nodes  {{ hostvars[groups['master'][0]].ansible_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-
  register: kubectl_configured
  until: kubectl_configured is succeeded
  retries: 10
  delay: 10
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_configured }}
  when: print_debug == true and inventory_hostname in groups['master']
  # for k8s 1.26
  # kubectl taint nodes  {{ hostvars[groups['master'][0]].ansible_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-
  # for k8s 1.21
  # kubectl taint nodes  {{ hostvars[groups['master'][0]].ansible_hostname }} node-role.kubernetes.io/control-plane:NoSchedule-
  # kubectl taint nodes --all node-role.kubernetes.io/master-


- name: Confirm that the Kubectl Command is activated.
  command: kubectl get nodes
  register: kubectl_get_nodes
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Create POD for Master as well
  lineinfile:
    path: /root/.bashrc
    line: "{{ item.content }}"
    insertafter: EOF
    create: true
  register: master_pod_created
  with_items:
    - { content: " if [ -f /etc/bash_completion ] && ! shopt -oq posix; then " }
    - { content: "   . /etc/bash_completion " }
    - { content: " fi " }
    - { content: " source <(kubectl completion bash) " }
  when: inventory_hostname in groups['master']
- debug: msg={{ master_pod_created }}
  when: print_debug == true and inventory_hostname in groups['master']


#- name: Configure Tiger Operator Network
#  command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/master/manifests/tigera-operator.yaml
#  async: 360
#  poll: 5
#  register: test1
#  when: inventory_hostname in groups['master']
#- debug: msg={{ test1.stdout_lines }}
#  when: print_debug == true and inventory_hostname in groups['master']
#  command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml

#- name: Configure Custom Resources
#  command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/master/manifests/custom-resources.yaml
#  async: 360
#  poll: 5
#  register: test2
#  when: inventory_hostname in groups['master']
#- debug: msg={{ test2.stdout_lines }}
#  when: print_debug == true and inventory_hostname in groups['master']
#  command: kubectl create -f https://docs.projectcalico.org/manifests/custom-resources.yaml


- name: Download Calico Networking
  get_url:
    url: https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml
    dest: /root/calico.yaml
    mode: 0644
  register: calico_downloaded
  when: inventory_hostname in groups['master']
- debug: msg={{ calico_downloaded }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Modify /root/calica.yaml for CIDR
  lineinfile:
    dest: /root/calico.yaml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
    backrefs: "{{ item.backrefs }}"
  register: calica_cidr_modified
  with_items:
    - { regexp: "^            # - name: CALICO_IPV4POOL_CIDR", line: "            - name: CALICO_IPV4POOL_CIDR", state: present, backrefs: yes }
    - { regexp: "^            #   value: \"192.168.0.0/16\"", line: "              value: \"10.142.0.0/16\"", state: present, backrefs: yes }
  when: inventory_hostname in groups['master']
- debug: msg={{ calica_cidr_modified }}
  when: print_debug == true and inventory_hostname in groups['master']
  #  - { regexp: "^            #   value: \"192.168.0.0/16\"", line: "              value: \"10.42.0.0/16\"", state: present, backrefs: yes }


- name: Setup Networking with Calico
  command: kubectl apply -f /root/calico.yaml
  register: calico_network_setup
  when: inventory_hostname in groups['master']
- debug: msg={{ calico_network_setup }}
  when: print_debug == true and inventory_hostname in groups['master']


#- name: Setup networking with kube-flannel
#  command: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
#  register: kube_flannel_network_setup
#  when: inventory_hostname in groups['master']
#- debug: msg={{ kube_flannel_network_setup }}
#  when: print_debug == true and inventory_hostname in groups['master']

#- name: Confirm that the kubectl command is activated.
#  command: kubectl get nodes
#  register: kubectl_get_nodes
#  when: inventory_hostname in groups['master']
#- debug: msg={{ kubectl_get_nodes }}
#  when: print_debug == true and inventory_hostname in groups['master']


- name: Join the Other Kubernetes Nodes to Cluster, the Command must be Run on the Worker Nodes Only
  command: kubeadm join "{{ hostvars[groups['master'][0]]['ansible_'~netdev1]['ipv4']['address'] }}:6443" --token "{{ k8s_token }}" --discovery-token-ca-cert-hash "{{ k8s_token_ca_cert }}"
  register: store_it_copied
  ignore_errors: yes
  when: inventory_hostname in groups['workers']
- debug: msg={{ store_it_copied }}
  when: print_debug == true and inventory_hostname in groups['workers']


- name: Confirm that the kubectl command is activated
  command: kubectl get nodes
  register: kubectl_get_nodes
  when: inventory_hostname in groups['master']
- debug: msg={{ kubectl_get_nodes }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Restart Docker Daemon in All Nodes
  systemd:
    name: docker
    state: restarted
    enabled: yes
  register: docker_restarted
  until: docker_restarted is succeeded
  retries: 10
  delay: 10
  when: inventory_hostname in groups['master']
- debug: msg={{ docker_restarted }}
  when: print_debug == true and inventory_hostname in groups['master']


- name: Restart Kubelet in Master Node
  systemd:
    name: kubelet
    state: restarted
    enabled: yes
  register: kubelet_restarted
- debug: msg={{ kubelet_restarted }}
  when: print_debug == true and inventory_hostname in groups['master']


#- name: Allow Kubernetes service ports for master node
#  firewalld:
#    permanent: yes
#    immediate: yes
#    port: "{{ item.port }}/{{ item.proto }}"
#    state: "{{ item.state }}"
#    zone: "{{ item.zone }}"
#  with_items: "{{ master_ports }}"
#  when: inventory_hostname in groups['master']
#  - { port: "5432-31594", proto: "tcp", state: "enabled", zone: "public" }


#- name: Allow Kubernetes service ports for workder nodes
#  firewalld:
#    permanent: yes
#    immediate: yes
#    port: "{{ item.port }}/{{ item.proto }}"
#    state: "{ {item.state }}"
#    zone: "{{ item.zone }}"
#  with_items: "{{ workers_ports }}"
#  when: inventory_hostname in groups['workers']
#  # - { port: "5432-31594", proto: "tcp", state: "enabled", zone: "public" }

#- name: Enable Masquerade on Master node
#  command: firewall-cmd --zone=public --add-masquerade --permanent


- name: Start Firewalld
  systemd:
    name: firewalld
    state: restarted
    enabled: yes
  register: firewalld_started
- debug: msg={{ firewalld_started }}
  when: print_debug == true
# Calico CNI
# https://stackoverflow.com/questions/62139375/calico-ips-confusion
# https://www.skyer9.pe.kr/wordpress/?p=7317

# https://github.com/projectcalico/calico/issues/5711
# This is to do with the settings on kube-proxy. If your pod-cidr isn't in the range that's configured on kube-proxy,
# kube-proxy will NAT pod-pod traffic between different nodes, which will break network policy (though connectivity will appear to work)
# Typically you have to re-create the cluster with the correct pod-cidr defined.
# Fundamentally:
# kube-proxy and calico pod-cidr settings must agree (calico pod-cidr must be wholly within the kube-proxy cluster-cidr)
# host-cidr, pod-cidr and service-cidrs need to be disjoint (i.e. separate and non-overlapping)
#
# https://www.centlinux.com/2022/11/install-kubernetes-master-node-rocky-linux.html


- name: Validate if Kubernetes Workers are all Ready
  shell: kubectl get nodes
  register: check_k8s_workers_status
  until: check_k8s_workers_status.stdout.find("NotReady") == -1
  retries: 30
  when: inventory_hostname in groups['master']
- debug: msg={{ check_k8s_workers_status }}
  when: print_debug == true and inventory_hostname in groups['master']

