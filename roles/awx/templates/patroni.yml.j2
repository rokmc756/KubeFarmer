scope: '{{ patroni.cluster_name }}'
name: '{{ inventory_hostname }}'
restapi:
  listen: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:8008'
  connect_address: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:8008'
etcd:
  hosts: '{{ groups['workers'] | map('extract', hostvars, ['ansible_eth0', 'ipv4', 'address']) | map('regex_replace', '$', ':2379') | join(',') }}'
bootstrap:
  dcs:
    ttl: 30
    loop_wait: 10
    retry_timeout: 10
    maximum_lag_on_failover: 1048576
    postgresql:
      use_pg_rewind: true
      use_slots: true
      parameters:
        hot_standby: 'on'
        archive_timeout: 1800s
        autovacuum_analyze_scale_factor: 0.02
        autovacuum_max_workers: 5
        autovacuum_vacuum_scale_factor: 0.05
        checkpoint_completion_target: 0.9
        hot_standby: 'on'
        log_autovacuum_min_duration: 0
        log_checkpoints: 'on'
        log_connections: 'on'
        log_disconnections: 'on'
        log_line_prefix: '%t [%p]: [%l-1] %c %x %d %u %a %h '
        log_lock_waits: 'on'
        log_min_duration_statement: 500
        log_statement: ddl
        log_temp_files: 0
        max_connections: 260
        max_replication_slots: 10
        max_wal_senders: 10
        tcp_keepalives_idle: 900
        tcp_keepalives_interval: 100
        track_functions: all
        wal_compression: 'on'
        wal_keep_segments: 20
        wal_level: hot_standby
        wal_log_hints: 'on'
        archive_mode: 'on'
        archive_timeout: 1800s
        archive_command: mkdir -p ../wal_archive && test ! -f ../wal_archive/%f && cp %p ../wal_archive/%f
      recovery_conf:
        restore_command: cp ../wal_archive/%f %p
    synchronous_mode: {{ patroni.sync_mode }}
    synchronous_mode_strict: {{ patroni.sync_mode }}
  initdb:
    - encoding: UTF8
    - data-checksums
  pg_hba:
{% for h in groups["workers"] %}
    - host replication replicator {{ hostvars[h]['ansible_eth0']['ipv4']['address'] }}/32 md5
{% endfor %}
    # host replication replicator {{ hostvars[groups['workers'][0-2]]['ansible_eth0']['ipv4']['address'] }}/32 md5
    - host all all 0.0.0.0/0 md5
{% if enable_ssl == true %}
    - hostssl all all 0.0.0.0/0 md5
{% endif %}
  users:
    admin:
      password: admin
      options:
        - createrole
        - createdb
postgresql:
  listen: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:5432'
  connect_address: '{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}:5432'
  data_dir: {{ pgsql.base_dir }}/patroni_data
  pgpass: {{ pgsql.base_dir }}/pgpass0
  authentication:
    replication:
      username: replicator
      password: rep-pass
    superuser:
      username: postgres
      password: postgres
    rewind:
      username: rewind_user
      password: rewind_password
  parameters:
    unix_socket_directories: /tmp
    port: 5432
    synchronous_commit: local
{% if enable_ssl == true %}
    ssl: 'on'
    ssl_ca_file: '{{ ssl.ssl_dir }}/ca.crt'
    ssl_cert_file: '{{ ssl.ssl_dir }}/server.crt'
    ssl_key_file: '{{ ssl.ssl_dir }}/server.key'
{% endif %}
    # synchronous_commit: "on"
    # synchronous_standby_name: "*"
    # synchronous_standby_name: none

watchdog:
  mode: automatic
  device: /dev/watchdog
  safety_margin: 5

tags:
  nofailover: false
  noloadbalance: false
  clonefrom: false
  nosync: false
