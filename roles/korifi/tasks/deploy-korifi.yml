# https://materialplus.srijan.net/resources/getting-started-with-korifi-cloud-foundry-a-comprehensive-guide
# https://neuw.medium.com/cloud-foundry-setup-using-korifi-f75ad4166ce9
# https://blog.khmersite.net/p/deploy-metrics-server-in-kubernetes-using-helm/
# https://www.definit.co.uk/2019/08/lab-guide-kubernetes-load-balancer-and-ingress-with-metallb-and-contour/
# https://trstringer.com/kubernetes-ingress-with-contour/
# https://hub.docker.com/r/jmoon/cf-for-k8s-test
# https://younsl.github.io/blog/k8s/install-metrics-server-using-helm/
# https://blog.khmersite.net/p/deploy-metrics-server-in-kubernetes-using-helm/
# https://sysdocu.tistory.com/1863
# https://sysdocu.tistory.com/1904


- name: Create Directory for Korifi Persistent Volumes
  file:
    path: "/mnt/korifi-storage"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_k8s_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_k8s_pv_dir }}
  when: print_debug == true


# --version should be helm chart version, not app version
- name: Intall Reflector
  shell: |
   helm install reflector emberstack/reflector -n reflector --create-namespace
  register: install_reflector
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_reflector }}
  when: print_debug == true
  # 7.1.262


# Replace the version of the release accordingly
# kubectl apply -f https://github.com/buildpacks-community/kpack/releases/download/v0.12.3/release-0.12.3.yaml
- name: Intall Kpack
  shell: |
    kubectl apply -f https://github.com/buildpacks-community/kpack/releases/download/v{{ kpack.major_version }}.{{ kpack.minor_version }}.{{ kpack.patch_version }}/release-{{ kpack.major_version }}.{{ kpack.minor_version }}.{{ kpack.patch_version }}.yaml
  register: install_repflector
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_reflector }}
  when: print_debug == true


- name: Validate if Kpack Containers are Running
  shell: |
    kubectl get pod -n kpack | sed 1d | awk '{print $3}' | sort | uniq
  register: check_kpack_containers
  until: check_kpack_containers.stdout.find("Running") != -1
  retries: 100
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_kpack_containers }}
  when: print_debug == true


- name: Copy Namespaces Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_namespaces_config_yaml
  with_items:
    - "cf-ns.yaml"
    - "korifi-ns.yaml"
- debug: msg={{ copy_namespaces_config_yaml }}
  when: print_debug == true


- name: Create Namespaces
  shell: |
    kubectl apply -f {{ item }}
  register: create_namespaces
  with_items:
    - "cf-ns.yaml"
    - "korifi-ns.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespaces }}
  when: print_debug == true


# /usr/local/bin/helm install contour bitnami/contour --namespace contour --create-namespace
- name: Intall Contour
  shell: |
    kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
  register: install_contour
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_contour }}
  when: print_debug == true
  # v1.29.1


- name: Create Docker Register Secret
  shell: |
    kubectl --namespace cf create secret docker-registry image-registry-credentials \
    --docker-username="admin" \
    --docker-password="changeme" \
    --docker-server="https://harbor.{{ korifi.domain_prefix }}"
  register: create_docker_secret
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_docker_secret }}
  when: print_debug == true
# ations of the schema(s) in the following chart(s):", "korifi:", "- global: containerRepositoryPrefix is required"], "stdout": "",


- name: Copy Korifi Config Values
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/korifi-values.yaml"
  register: copy_korifi_config_values
  with_items:
    - "korifi-v{{ korifi.major_version }}-{{ korifi.minor_version }}-{{ korifi.patch_version }}-values.yaml"
- debug: msg={{ copy_korifi_config_values }}
  when: print_debug == true


# --set=containerRepositoryPrefix="harbor.jtest.suse.com/"  \
# --set=networking.gatewayClass=contour \
- name: Install Korifi
  shell: |
    helm install korifi \
    https://github.com/cloudfoundry/korifi/releases/download/v{{ korifi.major_version }}.{{ korifi.minor_version }}.{{ korifi.patch_version }}/korifi-{{ korifi.major_version }}.{{ korifi.minor_version }}.{{ korifi.patch_version }}.tgz \
    -n korifi \
    -f korifi-values.yaml
  register: install_korifi
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_korifi }}
  when: print_debug == true


# --set=generateIngressCertificates=true \
# --set=rootNamespace="cf" \
# --set=containerRegistrySecret="image-registry-credentials" \
# --set=containerRepositoryPrefix="harbor.jtest.suse.com/"  \
# --set=adminUserName="cf-admin" \
# --set=api.apiServer.url="api.jtest.suse.com" \
# --set=defaultAppDomainName="apps.jtest.suse.com" \
# --set=kpackImageBuilder.builderRepository="harbor.jtest.suse.com/jproject01" \
# --wait
#
# --set=networking.gatewayClass=contour \
# 설치할 Korifi 버전에 따라 사용되는 옵션이 다릅니다.
# 가령 Korifi 0.10.0 버전에서는 옵션에 global. 이라는 명칭이 제거되고, Korifi 0.11.0 에서는 networking.gatewayClass 옵션이 추가됩니다.
# Korifi 0.7.1 이후의 버전 설치방법은 확인되면 업데이트 하겠습니다.
# 아래 Repository 에는 실제 사용 가능한 정보를 입력해야 합니다.


# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.6.1/components.yaml
# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.7.1/components.yaml


#- name: Copy Metrics Server Config Yaml
#  template:
#    src: "{{ item }}.j2"
#    dest: "{{ base_path }}/{{ item }}"
#  register: copy_metrics_server_config_yaml
#  with_items:
#    - "metrics-server-values.yaml"
#- debug: msg={{ copy_metrics_server_config_yaml }}


#- name: Intall Metrics Server
#  shell: |
#    /usr/local/bin/helm install metrics-server metrics-server/metrics-server -n metrics-server --create-namespace -f metrics-server-values.yaml --wait
#  register: install_metrics_server
#  ignore_errors: yes
#  args:
#    chdir: "{{ base_path }}/"
#- debug: msg={{ install_metrics_server }}


#- name: Intall Service Binding Runtime
#  shell: |
#    kubectl apply -f https://github.com/servicebinding/runtime/releases/download/v0.9.0/servicebinding-runtime-v{{ servicebinding.major_version }}.{{ servicebinding.minor_version }}.{{ servicebinding.patch_version }}.yaml
#  register: install_service_binding_runtime
#  args:
#    chdir: "{{ base_path }}/"
#- debug: msg={{ install_service_binding_runtime }}


# kubectl --namespace cf create secret docker-registry image-registry-credentials \
# --docker-username="rokmc756@gmail.com" \
# --docker-password="xxxxxxxx!@"


- name: Create User's Private Key, Replace 2048 to 3072, or 4096 for Better Security
  shell: |
    openssl genrsa -out cf-admin.key 2048
  register: create_user_private_key
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_user_private_key }}
  when: print_debug == true


- name: Create a CSR for the User cf-admin
  shell: |
    openssl req -new -key cf-admin.key -out cf-admin.csr -subj "/CN=cf-admin"
  register: create_csr
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_csr }}
  when: print_debug == true


- name: Convert CSR to Base64
  shell: |
    cat cf-admin.csr | base64 | tr -d "\n"
  register: convert_base64
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ convert_base64 }}
  when: print_debug == true


- name: Create a Yaml file for the Certificate Request whose Content are like below
  copy:
    dest: "{{ base_path }}/cert-request.yaml"
    content: |
      apiVersion: certificates.k8s.io/v1
      kind: CertificateSigningRequest
      metadata:
        name: cf-admin
      spec:
        request: {{ convert_base64.stdout }}
        signerName: kubernetes.io/kube-apiserver-client
        expirationSeconds: 604800
        usages:
          - client auth
  register: create_cert_request_yaml
- debug: msg={{ create_cert_request_yaml }}
  when: print_debug == true


- name: Apply the Manifest Using the File You Created in Previous Step
  shell: |
    kubectl apply -f cert-request.yaml
  register: apply_manifest_created
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ apply_manifest_created }}
  when: print_debug == true


- name: Validate the CSR if It got Created Successfully.
  shell: |
    kubectl get csr
  register: validate_csr
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ validate_csr }}
  when: print_debug == true


- name: Approve the Certificate Request
  shell: |
    kubectl certificate approve cf-admin
  register: approve_cert_request
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ approve_cert_request }}
  when: print_debug == true


- name: Save the Certificate to a File cf-admin.crt
  shell: |
    kubectl get csr cf-admin -o jsonpath='{.status.certificate}'| base64 -d > cf-admin.crt
  register: save_cert_file
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ save_cert_file }}
  when: print_debug == true


- name: Create Developer Role for the cf-admin.
  shell: |
    kubectl create role developer --verb=create --verb=get --verb=list --verb=update --verb=delete --resource=pods
  register: create_developer_role
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_developer_role }}
  when: print_debug == true


- name: Bind the Role to the cf-admin.
  shell: |
    kubectl create rolebinding developer-binding-cf-admin --role=developer --user=cf-admin
  register: bind_role
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ bind_role }}
  when: print_debug == true


- name: Embed the Certificate and Key In the kubeconfig.
  shell: |
    kubectl config set-credentials cf-admin --client-key=cf-admin.key --client-certificate=cf-admin.crt --embed-certs=true
  register: embed_cert_key
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ embed_cert_key }}
  when: print_debug == true


- name: Create Context For the cf-admin.
  shell: |
    kubectl config set-context cf-admin --cluster=kubernetes --user=cf-admin
  register: create_context
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_context }}
  when: print_debug == true


# export ROOT_NAMESPACE="cf"
# export KORIFI_NAMESPACE="korifi"
# export ADMIN_USERNAME="cf-admin"
# export BASE_DOMAIN="jtest.suse.com"
# export GATEWAY_CLASS_NAME="contour"

# /usr/local/bin/helm install korifi https://github.com/cloudfoundry/korifi/releases/download/v{{ korifi.major_version }}.{{ korifi.minor_version }}.{{ korifi.patch_version }}/korifi-{{ korifi.major_version }}.{{ korifi.minor_version }}.{{ korifi.patch_version }}.tgz \
# --namespace="korifi" \
# --set=generateIngressCertificates=true \
# --set=rootNamespace="cf" \
# --set=adminUserName="cf-admin" \
# --set=api.apiServer.url="api.jtest.suse.com" \
# --set=defaultAppDomainName="apps.jtest.suse.com" \
# --set=containerRepositoryPrefix="harbor.jtest.suse.com/"  \
# --set=kpackImageBuilder.builderRepository="harbor.jtest.suse.com/jproject01" \
# --set=networking.gatewayClass=contour \
# --wait

