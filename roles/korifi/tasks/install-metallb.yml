# https://oopflow.medium.com/setup-install-rancher-onto-existing-kubernetes-cluster-for-high-availability-7351f0284592

- name: Flush IP Route Cache
  shell: |
    ip route flush cache
  register: flush_ip_route_cache
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items: "{{ groups['all'] }}"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ flush_ip_route_cache }}


- name: Apply strictARP for VMWare or Cloud
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | \
    sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system
  register: apply_strict_arp
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ apply_strict_arp }}


- name: Create Namespace for Metallb
  shell: |
    kubectl create namespace metallb-system
  register: create_metallb_namespace
  ignore_errors: true
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_metallb_namespace }}


- name: Apply the Metallb
  shell:
    /usr/local/bin/helm install metallb metallb/metallb -n metallb-system
  register: apply_metallb_native_config
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ apply_metallb_native_config }}


#- name: Apply the Metallb Native
#  shell: |
#    kubectl apply -f \
#    https://raw.githubusercontent.com/metallb/metallb/v{{ metallb.major_version }}.{{ metallb.minor_version }}.{{ metallb.patch_version }}/config/manifests/metallb-native.yaml
#  register: apply_metallb_native_config
#  args:
#    chdir: "{{ base_path }}/"
#  environment:
#    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
#- debug: msg={{ apply_metallb_native_config }}


- name: Create Secret for Metallb Namespace
  shell: |
    kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
  register: create_metallb_secret
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
-
- debug: msg={{ create_metallb_secret }}


- name: Copy Metallb Config Yaml for VMware
  template:
    src: metallb-config-vmware.yaml.j2
    dest: "{{ base_path }}/metallb-config-vmware.yaml"
  register: copy_metallb_vmware_yaml
- debug: msg={{ copy_metallb_vmware_yaml }}


- name: Apply the Metallb Config for VMware
  shell: |
    kubectl apply -f "{{ base_path }}"/metallb-config-vmware.yaml
  register: apply_metallb_config
  until: apply_metallb_config is succeeded
  retries: 20
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ apply_metallb_config }}


#- name: Check if the Kube Ingress is Already Downloaded
#  stat: path={{ base_path }}/kubernetes-ingress
#  register: kube_ingress_dir_existed
#- debug: msg={{ kube_ingress_dir_existed }}
#
#
#- name: Clone Kubernetest Ingress
#  shell: |
#    git -C "{{ base_path }}" clone https://github.com/nginxinc/kubernetes-ingress.git \
#    --branch v{{ nginx.k8s_ingress.major_version }}.{{ nginx.k8s_ingress.minor_version }}.{{ nginx.k8s_ingress.patch_version }}
#  register: clone_k8s_ingress
#  ignore_errors: yes
#  when: kube_ingress_dir_existed.stat.exists != True
#- debug: msg={{ clone_k8s_ingress }}
#  when: kube_ingress_dir_existed.stat.exists != True
#
#
#- name: Apply NGINX Ingress CRDs
#  shell: |
#    kubectl apply -f crds/ --namespace=nginx-ingress
#  register: apply_nginx_ingress_crds
#  args:
#    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
#- debug: msg={{ apply_nginx_ingress_crds }}
#
#
#- name: Install NGINX Ingress
#  shell: |
#    /usr/local/bin/helm install nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress --create-namespace
#  register: install_nginx_ingress
#  args:
#    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
#- debug: msg={{ install_nginx_ingress }}
#
#
#- name: Upgrade NGINX Ingress CRDs
#  shell: |
#    /usr/local/bin/helm upgrade nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress
#  register: upgrade_nginx_ingress_crds
#  args:
#    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
#- debug: msg={{ upgrade_nginx_ingress_crds }}
#
