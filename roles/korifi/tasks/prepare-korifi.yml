---
- name: Create Directory
  file:
    path: "/mnt/korifi-storage"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_k8s_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_k8s_pv_dir }}
  when: print_debug == true


- name: Intall Reflector
  shell: |
    helm install reflector emberstack/reflector -n reflector --create-namespace
  register: install_reflector
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_reflector }}
  when: print_debug == true
  # kubectl -n kube-system apply -f https://github.com/emberstack/kubernetes-reflector/releases/latest/download/reflector.yaml


- name: Validate if Reflector Containers are Running
  shell: |
    kubectl get pod -n reflector | sed 1d | awk '{print $3}' | sort | uniq
  register: check_reflector_containers
  until: check_reflector_containers.stdout.find("Running") != -1
  retries: 30
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_reflector_containers }}
  when: print_debug == true


- name: Intall Kpack
  shell: |
    kubectl apply \
    -f https://github.com/buildpacks-community/kpack/releases/download/v{{ _kpack.major_version }}.{{ _kpack.minor_version }}.{{ _kpack.patch_version }}/release-{{ _kpack.major_version }}.{{ _kpack.minor_version }}.{{ _kpack.patch_version }}.yaml
  register: install_kpack
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_kpack }}
  when: print_debug == true


- name: Validate if Kpack Containers are Running
  shell: |
    kubectl get pod -n kpack | sed 1d | awk '{print $3}' | sort | uniq
  register: check_kpack_containers
  until: check_kpack_containers.stdout.find("Running") != -1
  retries: 100
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_kpack_containers }}
  when: print_debug == true


- name: Copy Namespaces Config
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_namespaces_config
  with_items:
    - "cf-ns.yaml"
- debug: msg={{ copy_namespaces_config }}
  when: print_debug == true


- name: Create Namespaces
  shell: |
    kubectl apply -f {{ item }}
  register: create_namespaces
  with_items:
    - "cf-ns.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespaces }}
  when: print_debug == true


- name: Intall Contour
  shell: |
    helm install contour bitnami/contour --namespace projectcontour --create-namespace
  register: install_contour
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_contour }}
  when: print_debug == true
  #  kubectl apply -f https://projectcontour.io/quickstart/contour.yaml


- name: Create Docker Register Secret
  shell: |
    kubectl --namespace cf create secret docker-registry image-registry-credentials \
    --docker-username="admin" --docker-password="changeme" \
    --docker-server="https://harbor.{{ _korifi.domain_prefix }}"
  register: create_docker_secret
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_docker_secret }}
  when: print_debug == true

