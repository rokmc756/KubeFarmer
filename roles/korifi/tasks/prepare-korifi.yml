---
- name: Intall Reflector
  shell: |
    helm install reflector emberstack/reflector -n reflector --create-namespace
  register: install_reflector
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_reflector }}
  when: print_debug == true


- name: Validate if Reflector Containers are Running
  shell: |
    kubectl get pod -n reflector | sed 1d | awk '{print $3}' | sort | uniq
  register: check_reflector_containers
  until: check_reflector_containers.stdout.find("Running") != -1
  retries: 30
  delay: 10
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_reflector_containers }}
  when: print_debug == true


- name: Intall Kpack
  shell: |
    kubectl apply \
    -f {{ _kpack.download_url }}/v{{ kpack_version }}/release-{{ kpack_version }}.yaml
  register: install_kpack
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_kpack }}
  when: print_debug == true


- name: Validate if Kpack Containers are Running
  shell: |
    kubectl get pod -n kpack | sed 1d | awk '{print $3}' | sort | uniq
  register: check_kpack_containers
  until: check_kpack_containers.stdout.find("Running") != -1
  retries: 100
  delay: 10
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_kpack_containers }}
  when: print_debug == true


- name: Intall Contour
  shell: |
    kubectl apply -f \
    {{ _contour.download_url }}/release-{{ _contour.major_version }}.{{ _contour.minor_version }}/examples/render/contour-gateway-provisioner.yaml
  register: install_contour
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_contour }}
  when: print_debug == true
# kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
# kubectl apply -f https://raw.githubusercontent.com/projectcontour/contour/release-1.30/examples/render/contour-gateway-provisioner.yaml
# helm install contour bitnami/contour --namespace projectcontour --create-namespace


- name: Copy Namespaces Config
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_namespaces_config
  with_items:
    - "cf-ns.yaml"
    - "gateway-class-name.yaml"
- debug: msg={{ copy_namespaces_config }}
  when: print_debug == true


- name: Intall Service Binding Runtime
  shell: |
    kubectl apply \
    -f {{ _servicebinding.download_url }}/v{{ servicebinding_version }}/servicebinding-runtime-v{{ servicebinding_version }}.yaml
  register: install_service_binding_runtime
  args:
    chdir: "{{ base_path }}"
- debug: msg={{ install_service_binding_runtime }}


- name: Create Namespaces
  shell: |
    kubectl apply -f {{ item }}
  register: create_namespaces
  with_items:
    - "cf-ns.yaml"
    - "gateway-class-name.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespaces }}
  when: print_debug == true


- name: Create Docker Register Secret
  shell: |
    kubectl --namespace cf create secret docker-registry image-registry-credentials \
    --docker-username=admin --docker-password=changeme \
    --docker-server=https://harbor.{{ _korifi.domain_prefix }}
  register: create_docker_secret
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_docker_secret }}
  when: print_debug == true


- name: Install Kubernetes Gateway API
  shell: |
    kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null || \
    { kubectl kustomize "github.com/kubernetes-sigs/gateway-api/config/crd?ref=v{{ gateway_api_version }}" | kubectl apply -f -; }
  register: install_kube_gw_api
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ install_kube_gw_api }}
  when: print_debug == true


- name: Copy Metrics Server Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_metrics_server_config_yaml
  with_items:
    - "metrics-server-values.yaml"
- debug: msg={{ copy_metrics_server_config_yaml }}


- name: Intall Metrics Server
  shell: |
    /usr/local/bin/helm install metrics-server metrics-server/metrics-server \
    -n metrics-server --create-namespace -f metrics-server-values.yaml --wait
  register: install_metrics_server
  ignore_errors: yes
  args:
    chdir: "{{ base_path }}"
- debug: msg={{ install_metrics_server }}

