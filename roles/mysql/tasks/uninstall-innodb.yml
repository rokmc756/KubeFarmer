---
- name: Destroy MySQL InnoDB Cluster
  shell:
    helm uninstall mysql-innodb -n mysql-innodb
  register: destroy_mysql_innodb_cluster
  ignore_errors: true
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ destroy_mysql_innodb_cluster }}
  when: print_debug == true


- name: Validate if MySQL InnoDB Containers are Destroyed Normally
  shell: |
    kubectl -n mysql-innodb get pods | sed 1d | grep mysql-innodb- | awk '{print $3}' | wc -l
  register: check_mysql_innodb_container
  ignore_errors: true
  until: check_mysql_innodb_container.stdout|int == 0
  retries: 60
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_mysql_innodb_container }}
  when: print_debug == true


- name: Destroy MySQL InnoDB Operator
  shell:
    helm uninstall mysql-operator -n mysql-operator
  register: destroy_innodb_operator
  ignore_errors: true
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ destroy_innodb_operator }}
  when: print_debug == true


- name: Validate if MySQL InnoDB Operator Containers are Destroyed Normally
  shell: |
    kubectl -n mysql-operator get pods | sed 1d | grep mysql-operator- | awk '{print $3}' | wc -l
  register: check_innodb_operator_container
  ignore_errors: true
  until: check_innodb_operator_container.stdout|int == 0
  retries: 60
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_innodb_operator_container }}
  when: print_debug == true


- name: Delete MySQL InnoDB Helm Config Values
  file:
    path: "{{ base_path }}/{{ item }}"
    state: absent
  register: delete_mysql_innodb_helm_config_yaml
  ignore_errors: true
  with_items:
    - "mysql-innodb-values.yaml"
- debug: msg={{ delete_mysql_innodb_helm_config_yaml }}


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  ignore_errors: true
  with_items:
    - "innodb-storage-class.yaml"
    - "innodb-storage-pv.yaml"
    - "innodb-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Delete Persistent Volumes and Storage Class
  shell: |
    kubectl delete -f {{ item }}
  register: delete_pvc
  ignore_errors: true
  with_items:
    - "innodb-storage-pvc.yaml"
    - "innodb-storage-pv.yaml"
    - "innodb-storage-class.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ delete_pvc }}
  when: print_debug == true


- name: Delete Namespace for Persistent Volumes
  shell: |
    kubectl delete namespace {{ item }}
  register: delete_namespace
  ignore_errors: true
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  with_items:
    - mysql-innodb
    - mysql-operator
- debug: msg={{ delete_namespace }}
  when: print_debug == true


- name: Delete Directory for Persistent Volumes
  file:
    path: "{{ mysql.innodb.storage_path }}"
    state: absent
  register: delete_pv_dir
  ignore_errors: true
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ delete_pv_dir }}
  when: print_debug == true

