# https://mlops-for-all.github.io/docs/appendix/metallb
# https://kmaster.tistory.com/156
# https://github.com/kubeflow/kubeflow/issues/5271

- name: Load Kernel Modules for KubeFlow
  shell: |
    modprobe {{ item }}
  with_items:
    - nf_nat
    - xt_REDIRECT
    - xt_owner
    - iptable_nat
    - iptable_mangle
    - iptable_filter


- name: Check if the Kubeflow is Already Downloaded
  stat: path={{ base_path }}/manifests
  register: kubeflow_dir_existed
- debug: msg={{ kubeflow_dir_existed }}


- name: Clone Kubeflow
  shell: |
    git -C "{{ base_path }}" clone --single-branch --branch v{{ _kubeflow.major_version }}.{{ _kubeflow.minor_version }}.{{ _kubeflow.patch_version }} \
    https://github.com/kubeflow/manifests.git
  register: git_clone_kubeflow
  ignore_errors: true
  when: _kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True
- debug: msg={{ git_clone_kubeflow }}
  when: print_debug == true and _kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True


- name: Create KubeFlow PVC
  import_tasks: create-kubeflow-pvc.yml


#- name: Validate if KubeFlow Containers are still Creating
#  shell: |
#    kubectl get all -A | grep {{ item }} | awk '{print $4}' | uniq | cut -d : -f 1
#  register: check_kubeflow_containers
#  until: check_kubeflow_containers.stdout.find("") != -1
#  retries: 100
#  delay: 10
#  with_items:
#    - Init
#    - PodIntializing
#    - ContainerCreating
#    - CrashLoopBackOff
#- debug: msg={{ check_kubeflow_containers }}
#  when: print_debug == true


# kubectl rollout restart deployment -n kubeflow

# python3 -c 'from passlib.hash import bcrypt; import getpass; print(bcrypt.using(rounds=12, ident="2y").hash(getpass.getpass()))'
# Password:
# $2y$12$Tup0fFXFr0ZNpI.CS8ot4.9bhbk1QJcFCh.Tf41XKnBfaapMHVLha

# Note. Your Kubernetes cluster must have StorageClass for dynamic volume provisioning for Katib DB.
# For more information, check the Kubernetes documentation on dynamic provisioning. 
# If your cluster doesnâ€™t have dynamic volume provisioning, you must manually deploy PersistentVolume (PV) to bind PVC for the Katib DB component.

# https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/
# https://prathapreddy-mudium.medium.com/dynamic-volume-provisioning-in-kubernetes-19fc6a02e19d
# https://waspro.tistory.com/771

# kubectl get secret mlpipeline-minio-artifact -n kubeflow -o jsonpath="{.data.accesskey}" | base64 --decode
# minio
# kubectl get secret mlpipeline-minio-artifact -n kubeflow -o jsonpath="{.data.secretkey}" | base64 --decode
# minio123

# kubectl -n kubeflow get secrets mlpipeline-minio-artifact -o yaml | \
# sed -e "s/$(echo minio123|base64|sed -e s/K$/=$/g)/$(echo changeme123|base64|sed -e s/K$/=/g)/g" | \
# kubectl -n kubeflow apply -f -

