# https://mlops-for-all.github.io/docs/appendix/metallb
#
- name: Check if the Kubeflow is already downloaded
  stat: path={{ base_path }}/manifests
  register: kubeflow_dir_existed
- debug: msg={{ kubeflow_dir_existed }}


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ item }}
  register: create_namespace
  ignore_errors: true
  with_items:
    - kubeflow
    - istio-system
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  ignore_errors: yes
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  ignore_errors: true
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ create_pvc }}
  when: print_debug == true


- name: Clone Kubeflow
  shell: |
    git -C "{{ base_path }}" clone --single-branch --branch v{{ kubeflow.major_version }}.{{ kubeflow.minor_version }}.{{ kubeflow.patch_version }} \
    https://github.com/kubeflow/manifests.git
  register: git_clone_kubeflow
  ignore_errors: true
  when: kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True
- debug: msg={{ git_clone_kubeflow }}
  when: print_debug == true and kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True


# Change CluserIP to LoadBalancer
# kubectl -n istio-system patch svc istio-ingressgateway \
# -p '{"spec": {"ports": [{"port": 443,"targetPort": 443,"name": "https"},{"port": 80,"targetPort": 80,"name": "http"}],"type": "LoadBalancer"}}'



# kustomize build example | sed '/mysql_native_password/d' | kubectl apply -f -
# while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
# kustomize build example | kubectl apply -f -
#- name: Deploy Kubeflow
#  shell: |
#    kustomize build {{ item }} | kubectl apply -f -
#  register: deploy_kubeflow
#  ignore_errors: true
#  until: deploy_kubeflow is succeeded
#  retries: 5
#  delay: 20
#  args:
#    chdir: "{{ base_path }}/manifests"
#  environment:
#    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
#  with_items:
#    - "common/cert-manager/cert-manager/base"
#    - "kustomize build common/cert-manager/kubeflow-issuer/base"
#    - "common/istio-1-17/istio-crds/base"
#    - "common/istio-1-17/istio-namespace/base"
#    - "common/istio-1-17/istio-install/base"
#    - "common/dex/overlays/istio"
#    - "common/oidc-authservice/base"
#    - "common/kubeflow-namespace/base"
#    - "common/kubeflow-roles/base"
#    - "common/istio-1-17/kubeflow-istio-resources/base"
#    - "apps/pipeline/upstream/env/platform-agnostic-multi-user"
#    - "apps/katib/upstream/installs/katib-with-kubeflow"
#    - "apps/centraldashboard/upstream/overlays/istio"
#    - "apps/admission-webhook/upstream/overlays/cert-manager"
#    - "apps/profiles/upstream/overlays/kubeflow"
#    - "apps/volumes-web-app/upstream/overlays/istio"
#    - "apps/training-operator/upstream/overlays/kubeflow"
#    - "common/user-namespace/base"
#- debug: msg={{ deploy_kubeflow }}
#  when: print_debug == true


# kustomize build example | sed '/mysql_native_password/d' | kubectl apply -f -
# kustomize build example | kubectl apply -f -
# while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
- name: Deploy Kubeflow
  shell: |
    kustomize build example | kubectl apply -f -
  register: deploy_kubeflow
  ignore_errors: true
  until: deploy_kubeflow is succeeded
  retries: 10
  delay: 5
  args:
    chdir: "{{ base_path }}/manifests"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_kubeflow }}
  when: print_debug == true


- name: Validate if KubeFlow Containers are still Initializing
  shell: |
    kubectl get pods -n {{ item.ns }} | grep {{ item.pod }}
  register: check_kubeflow_containers
  until: check_kubeflow_containers.stdout.find("PodIntializing") == -1
  retries: 100
  delay: 10
  with_items:
    - { ns: knative-serving , pod: "domain-mapping" }
    - { ns: knative-serving, pod: "domainmapping-webhook" }
    - { ns: kubeflow, pod: "cache-server" }
    - { ns: kubeflow, pod: "katib-ui" }
- debug: msg={{ check_kubeflow_containers }}
  when: print_debug == true


- name: Validate if KubeFlow Container is still CrashLoopBackOff
  shell: |
    kubectl get pods -n {{ item.ns }} | grep {{ item.pod }}
  register: check_kubeflow_container
  until: check_kubeflow_container.stdout.find("CrashLoopBackOff") == -1
  retries: 100
  delay: 10
  with_items:
    - { ns: kubeflow, pod: "metadata-grpc-deployment" }
- debug: msg={{ check_kubeflow_container }}
  when: print_debug == true


- name: Check KubeFlow Ingress
  shell: |
    kubectl get service -n istio-system istio-ingressgateway
  register: check_kubeflow_ingress
- debug: msg={{ check_kubeflow_ingress }}
  when: print_debug == true

