# https://mlops-for-all.github.io/docs/appendix/metallb

- name: Check if the Kubeflow is already downloaded
  stat: path={{ base_path }}/manifests
  register: kubeflow_dir_existed
- debug: msg={{ kubeflow_dir_existed }}


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ item }}
  register: create_namespace
  ignore_errors: true
  with_items:
    - kubeflow
    - istio-system
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  ignore_errors: yes
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  ignore_errors: true
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ create_pvc }}
  when: print_debug == true


- name: Clone Kubeflow
  shell: |
    git -C "{{ base_path }}" clone --single-branch --branch v{{ kubeflow.major_version }}.{{ kubeflow.minor_version }}.{{ kubeflow.patch_version }} \
    https://github.com/kubeflow/manifests.git
  register: git_clone_kubeflow
  ignore_errors: true
  when: kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True
- debug: msg={{ git_clone_kubeflow }}
  when: print_debug == true and kubeflow.clone_git == true and kubeflow_dir_existed.stat.exists != True


# kustomize build example | sed '/mysql_native_password/d' | kubectl apply -f -
# while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
# kustomize build example | kubectl apply -f -
#- name: Deploy Kubeflow
#  shell: |
#    kustomize build {{ item }} | kubectl apply -f -
#  register: deploy_kubeflow
#  ignore_errors: true
#  until: deploy_kubeflow is succeeded
#  retries: 5
#  delay: 20
#  args:
#    chdir: "{{ base_path }}/manifests"
#  environment:
#    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
#  with_items:
#    - "common/cert-manager/cert-manager/base"
#    - "kustomize build common/cert-manager/kubeflow-issuer/base"
#    - "common/istio-1-17/istio-crds/base"
#    - "common/istio-1-17/istio-namespace/base"
#    - "common/istio-1-17/istio-install/base"
#    - "common/dex/overlays/istio"
#    - "common/oidc-authservice/base"
#    - "common/kubeflow-namespace/base"
#    - "common/kubeflow-roles/base"
#    - "common/istio-1-17/kubeflow-istio-resources/base"
#    - "apps/pipeline/upstream/env/platform-agnostic-multi-user"
#    - "apps/katib/upstream/installs/katib-with-kubeflow"
#    - "apps/centraldashboard/upstream/overlays/istio"
#    - "apps/admission-webhook/upstream/overlays/cert-manager"
#    - "apps/profiles/upstream/overlays/kubeflow"
#    - "apps/volumes-web-app/upstream/overlays/istio"
#    - "apps/training-operator/upstream/overlays/kubeflow"
#    - "common/user-namespace/base"
#- debug: msg={{ deploy_kubeflow }}
#  when: print_debug == true


# kustomize build example | sed '/mysql_native_password/d' | kubectl apply -f -
# while ! kustomize build example | kubectl apply -f -; do echo "Retrying to apply resources"; sleep 10; done
- name: Deploy Kubeflow
  shell: |
    kustomize build example | kubectl apply -f -
  register: deploy_kubeflow
  until: deploy_kubeflow is not succeeded
  retries: 3
  delay: 10
  args:
    chdir: "{{ base_path }}/manifests"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  failed_when: deploy_kubeflow.rc in [ 0, 68 ]
- debug: msg={{ deploy_kubeflow }}
  when: print_debug == true


- name: Validate if KubeFlow Containers are still Creating
  shell: |
    kubectl get all -A | grep {{ item }} | awk '{print $4}' | uniq | cut -d : -f 1
  register: check_kubeflow_containers
  until: check_kubeflow_containers.stdout.find("") != -1
  retries: 100
  delay: 10
  with_items:
    - Init
    - PodIntializing
    - ContainerCreating
    - CrashLoopBackOff
- debug: msg={{ check_kubeflow_containers }}
  when: print_debug == true


- name: Check KubeFlow Ingress
  shell: |
    kubectl get service -n istio-system istio-ingressgateway
  register: check_kubeflow_ingress
- debug: msg={{ check_kubeflow_ingress }}
  when: print_debug == true


#
# python3 -c 'from passlib.hash import bcrypt; import getpass; print(bcrypt.using(rounds=12, ident="2y").hash(getpass.getpass()))'
# Password:
# $2y$12$Tup0fFXFr0ZNpI.CS8ot4.9bhbk1QJcFCh.Tf41XKnBfaapMHVLha

# Change CluserIP to LoadBalancer
# kubectl -n istio-system patch svc istio-ingressgateway \
# -p '{"spec": {"ports": [{"port": 443,"targetPort": 443,"name": "https"},{"port": 80,"targetPort": 80,"name": "http"}],"type": "LoadBalancer"}}'

# https://github.com/kubeflow/manifests#change-default-user-password
# https://yjwang.tistory.com/entry/kubeflow-dex-%EC%95%94%ED%98%B8-%EB%B3%80%EA%B2%BD

# https://v0-7.kubeflow.org/docs/started/k8s/kfctl-existing-arrikto/



# kubectl -n kubeflow get gateways.networking.istio.io kubeflow-gateway -o yaml
#apiVersion: networking.istio.io/v1beta1
#kind: Gateway
#metadata:
#  annotations:
#    kubectl.kubernetes.io/last-applied-configuration: |
#      {"apiVersion":"networking.istio.io/v1alpha3","kind":"Gateway","metadata":{"annotations":{},"name":"kubeflow-gateway","namespace":"kubeflow"},"spec":{"selector":{"istio":"ingressgateway"},"servers":[{"hosts":["*"],"port":{"name":"http","number":80,"protocol":"HTTP"}}]}}
#  creationTimestamp: "2024-06-17T07:36:29Z"
#  generation: 2
#  name: kubeflow-gateway
#  namespace: kubeflow
#  resourceVersion: "73363"
#  uid: fb1aba7b-5763-4c09-af26-77fdc164bc8f
#spec:
#  selector:
#    istio: ingressgateway
#  servers:
#  - hosts:
#    - '*'
#    port:
#      name: http
#      number: 80
#      protocol: HTTP
#    tls:
#      httpsRedirect: true
#  - hosts:
#    - '*'
#    port:
#      name: https
#      number: 443
#      protocol: HTTPS
#    tls:
#      mode: SIMPLE
#      privateKey: /etc/istio/ingressgateway-certs/tls.key
#      serverCertificate: /etc/istio/ingressgateway-certs/tls.crt


# Note. Your Kubernetes cluster must have StorageClass for dynamic volume provisioning for Katib DB.
# For more information, check the Kubernetes documentation on dynamic provisioning. 
# If your cluster doesnâ€™t have dynamic volume provisioning, you must manually deploy PersistentVolume (PV) to bind PVC for the Katib DB component.
#
# https://kubernetes.io/docs/concepts/storage/dynamic-provisioning/
# https://prathapreddy-mudium.medium.com/dynamic-volume-provisioning-in-kubernetes-19fc6a02e19d
# https://waspro.tistory.com/771

