---
# Install Harbor continaer registry for CentOS 8.x or Rocky 8
#
#- name: Install Python 2.7 but do not select it
#  alternatives:
#    name: python
#    path: /usr/bin/python2.7
#    link: /usr/bin/python
#    state: present


- name: Alternative Python Version to Python2
  command: alternatives --set python /usr/bin/python2
  register: alternative_python_version
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8
- debug: msg={{ alternative_python_version }}
  when: print_debug == true and hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8
  #  update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1


- name: Install the EPEL Repo and Other Required Packages to Your System
  package:
    name: "{{ item }}"
    state: present
  register: install_dependency_packages
  with_items:
    - "epel-release"
    - "firewalld"
    - "python3"
    - "python3-devel"
    - "python3-psycopg2"
    - "python3-pip"
    - "python3-setuptools"
    - "libselinux-python3"
    - "wget"
    - "yum-utils"
- debug: msg={{ install_dependency_packages }}
  when: print_debug == true
  # ignore_errors: yes


- name: Install the EPEL Repo and Other Required Packages to Your System
  package:
    name: "{{ item }}"
    state: present
  register: install_python2_packages
  with_items:
    - "python2-pip"
    - "python2-psycopg2"
    - "libselinux-python2"
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8
- debug: msg={{ install_python2_packages }}
  when: print_debug == true and hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8


- name: Disable SELinux to be Required
  selinux:
    state: disabled
  register: disable_selinux
  failed_when: disable_selinux.reboot_required == false
- debug: msg={{ disable_selinux }}
  when: print_debug == true


- name: Reboot required
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 30
  poll: 0
  notify:
    - Waiting for server to come back after restart
  when: disable_selinux.reboot_required == true


- meta: flush_handlers


- name: Check if SELinux has been disabled in Configurtion File
  command: grep SELINUX /etc/sysconfig/selinux
  register: sevalue
- debug: msg={{ sevalue }}
  when: print_debug == true


- name: Add Docker Repository
  yum_repository:
    name: docker-ce
    description: Add docker repsotiry
    baseurl: "https://download.docker.com/linux/centos/{{ hostvars[inventory_hostname].ansible_distribution_major_version }}/x86_64/stable/"
    gpgcheck: "no"
  register: add_docker_repo
- debug: msg={{ add_docker_repo }}
  when: print_debug == true


- name: Install the latest version of Docker-CE Packages in All Nodes
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - "docker-ce"
  register: install_docker
- debug: msg={{ install_docker }}
  when: print_debug == true


- name: Install Docker-Compose Using Pip
  shell: |
    export PATH=$PATH:/usr/local/bin && pip3 install --upgrade pip
    export PATH=$PATH:/usr/local/bin && pip3 install --upgrade --ignore-installed pip setuptools
    export PATH=$PATH:/usr/local/bin && pip3 install setuptools_rust
    export PATH=$PATH:/usr/local/bin && pip3 install docker-compose
  ignore_errors: yes
  register: install_docker_compose
- debug: msg={{ install_docker }}
  when: print_debug == true
  # pip2 install docker-compose
  # pip3.6 is on centos or rocky8
  # pip-3.6 is on /usr/local/bin installed manually


- name: Enable and Start Docker
  systemd:
    name: docker
    state: started
    enabled: yes
    daemon-reload: yes
  register: enable_docker
  until: enable_docker is succeeded
  retries: 30
  delay: 10
  failed_when: enable_docker is failure
- debug: msg={{ enable_docker }}
  when: print_debug == true


- name: Verify that Docker is installed Correctly by Running the Hello-World Image
  shell: |
    docker run hello-world
  ignore_errors: yes
  register: run_docker_hello
- debug: msg={{ run_docker_hello }}
  when: print_debug == true


- name: The Binary of the Installer can be Downloaded From the Release page. Choose Either the Online or Offline Installer
  get_url:
    url: https://github.com/vmware/harbor/releases/download/v{{ harbor.major_version }}.{{ harbor.minor_version }}.{{ harbor.patch_version }}/harbor-online-installer-v{{ harbor.major_version }}.{{ harbor.minor_version }}.{{ harbor.patch_version }}.tgz
    dest: /root/harbor-online-installer-v{{ harbor.major_version }}.{{ harbor.minor_version }}.{{ harbor.patch_version }}.tgz
    mode: 0644
  register: download_harbor
- debug: msg={{ download_harbor }}
  when: print_debug == true


- name: Unarchive Harbor Tarball
  unarchive: src=/root/harbor-online-installer-v{{ harbor.major_version }}.{{ harbor.minor_version }}.{{ harbor.patch_version }}.tgz dest=/root/ remote_src=yes owner=root group=root
  register: unarchive_harbor
- debug: msg={{ unarchive_harbor }}
  when: print_debug == true


# New cert
# openssl req -x509 -newkey rsa:4096 -sha256 -days 365 -nodes -keyout ./private.key -out ./public.crt \ -subj "/CN=rk9-harbor.jtest.pivotal.io" \
#  -addext "subjectAltName=DNS:rk9-harbor.jtest.pivotal.io,DNS:192.168.0.2,IP:0.0.0.0,IP:127.0.0.1,IP:192.168.0.199"

# Previous Certs
# openssl req -x509 -new -nodes -sha512 -days 3650 -subj "/C={{ cert_country }}/ST={{ cert_state }}/L={{ cert_location }}/O={{ cert_org }}/OU={{ cert_org_unit }}/CN={{ ansible_fqdn }}" -key /root/certs/ca.key -out /root/certs/ca.crt
- name: Generate Your Own SSL Certificate
  shell: |
    mkdir /root/certs && mkdir /data/certs
    openssl genrsa -out /root/certs/ca.key 4096
    openssl req -x509 -new -nodes -sha512 -days 3650 -subj "/C={{ harbor.cert.country }}/ST={{ harbor.cert.state }}/L={{ harbor.cert.location }}/O={{ harbor.cert.org }}/OU={{ harbor.cert.org_unit }}/CN={{ harbor.hostname }}.{{ harbor.domain }}" -key /root/certs/ca.key -out /root/certs/ca.crt
    openssl genrsa -out /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.key 4096
    openssl req -sha512 -new -subj "/C={{ harbor.cert.country }}/ST={{ harbor.cert.state }}/L={{ harbor.cert.location }}/O={{ harbor.cert.org }}/OU={{ harbor.cert.org_unit }}/CN={{ harbor.hostname }}.{{ harbor.domain }}" -key /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.key -out /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.csr
  register: generate_certs
- debug: msg={{ generate_certs }}
  when: print_debug == true


- name: Copy an x509 v3 Extension File
  template: src=v3.ext.j2 dest=/root/certs/v3.ext  owner=root group=root mode=644 force=yes
  register: copy_v3_ext
- debug: msg={{ copy_v3_ext }}
  when: print_debug == true


- name: Generate an x509 v3 Extension File
  shell: |
    openssl x509 -req -sha512 -days 3650 -extfile /root/certs/v3.ext -CA /root/certs/ca.crt -CAkey /root/certs/ca.key -CAcreateserial -in /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.csr -out /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.crt
  register: generate_v3_ext
- debug: msg={{ generate_v3_ext }}
  when: print_debug == true


- name: Generate an x509 v3 Extension File
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  register: copy_certs
  with_items:
    - { src: "/root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.crt", dest: "/data/certs/harbor.{{ harbor.domain }}.crt" }
    - { src: "/root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.key", dest: "/data/certs/harbor.{{ harbor.domain }}.key" }


- name: Copy harbor.tmpl to harboy.yml
  shell: |
    openssl x509 -inform PEM -in /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.crt -out /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.cert
  register: copy_harbor_yml


- name: Creates Directory
  file:
    path: "/etc/docker/certs.d/{{ harbor.hostname }}.{{ harbor.domain }}:443"
    state: directory
    owner: root
    group: root
    mode: 0755


- name: Generate an x509 v3 Extension File
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  register: copy_certs
  with_items:
    - { src: "/root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.cert", dest: "/etc/docker/certs.d/{{ harbor.hostname }}.{{ harbor.domain }}:443/{{ harbor.hostname }}.{{ harbor.domain }}.cert" }
    - { src: "/root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.key",  dest: "/etc/docker/certs.d/{{ harbor.hostname }}.{{ harbor.domain }}:443/{{ harbor.hostname }}.{{ harbor.domain }}.key" }
    - { src: "/root/certs/ca.crt",                  dest: "/etc/docker/certs.d/{{ harbor.hostname }}.{{ harbor.domain }}:443/ca.crt" }


- name: Configure the Docker Daemon to Use Systemd for the Management of the Cotainer's Cgroups and Repository
  template: src=daemon.json.j2 dest=/etc/docker/daemon.json owner=root group=root mode=644 force=yes
  register: config_cgroup_docker
- debug:
    var: "{{ cgroup_docker_configured }}"
  when: print_debug == true


- name: Restart Docker
  systemd:
    name: docker
    state: restarted
  register: restart_docker
  until: restart_docker is succeeded
  retries: 3
  delay: 10
- debug: msg={{ restart_docker }}
  when: print_debug == true


- name: Alternative Python Version to Python2
  command: alternatives --set python /usr/bin/python2
  ignore_errors: yes
  register: alternative_python_version
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8
- debug: msg={{ alternative_python_version }}
  when: print_debug == true and hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8


# dest: /root/harbor/harbor.yml
- name: Modify harbor.yml "{{ harbor.domain }}" with Control Plane's IP address
  lineinfile:
    dest: /root/harbor/harbor.yml.tmpl
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
    backrefs: "{{ item.backrefs }}"
  register: modify_harbor_config
  with_items:
    - { regexp: "^hostname: *", line: "hostname: {{ harbor.hostname }}.{{ harbor.domain }}", state: present, backrefs: yes }
    - { regexp: "^  certificate: *", line: "  certificate: /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.crt", state: present, backrefs: yes }
    - { regexp: "^  private_key: *", line: "  private_key: /root/certs/{{ harbor.hostname }}.{{ harbor.domain }}.key", state: present, backrefs: yes }
    - { regexp: "^harbor_admin_password: *", line: "harbor_admin_password: {{ harbor.admin_password }}", state: present, backrefs: yes }
    - { regexp: "^  password: *", line: "  password: /root/certs/{{ harbor.database_password }}", state: present, backrefs: yes }
- debug: msg={{ modify_harbor_config }}
  when: print_debug == true


- name: Copy harbor.tmpl to harboy.yml
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  register: copy_harbor_yml
  with_items:
    - { src: "/root/harbor/harbor.yml.tmpl", dest: "/root/harbor/harbor.yml" }


- name: Run Prepare for Installation
  shell: |
    export PATH=$PATH:/usr/local/bin && sh /root/harbor/prepare --with-notary --with-trivy
  register: install_prepare_run
  # For 1.10
  #  export PATH=$PATH:/usr/local/bin && sh /root/harbor/prepare --with-notary --with-clair --with-chartmuseum
- debug: msg={{ install_prepare_run }}
  when: print_debug == true


- name: Run Harbor in the Background
  shell: |
    export PATH=$PATH:/usr/local/bin && docker compose -f /root/harbor/docker-compose.yml up -d
  register: run_harbor
  async: 600
  poll: 5
  # until: docker_run is succeeded
- debug: msg={{ run_harbor }}
  when: print_debug == true


- name: Enable and Start Firewalld
  systemd:
    name: firewalld
    state: started
    enabled: yes
    daemon-reload: yes
  register: enable_firewalld


- name: Allow Port 80 and 20 ports through Firewalld
  firewalld:
    permanent: yes
    immediate: yes
    port: "{{ item.port }}/{{ item.proto }}"
    state: "{{ item.state }}"
    zone: "{{ item.zone }}"
  register: allow_firewalld_port
  with_items:
    - { port: "80", proto: "tcp", zone: "public", state: "enabled" }
    - { port: "80", proto: "tcp", zone: "public", state: "enabled" }
- debug: msg={{ allow_firewalld_port }}
  when: print_debug == true

