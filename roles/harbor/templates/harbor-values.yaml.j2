expose:
  # Set how to expose the service. Set the type as "ingress", "clusterIP", "nodePort" or "loadBalancer"
  # and fill the information in the corresponding section
  type: loadBalancer
  tls:
    # Enable TLS or not.
    # Delete the "ssl-redirect" annotations in "expose.ingress.annotations" when TLS is disabled and "expose.type" is "ingress"
    # Note: if the "expose.type" is "ingress" and TLS is disabled,
    # the port must be included in the command when pulling/pushing images.
    # Refer to https://github.com/goharbor/harbor/issues/5291 for details.
    enabled: false
    # The source of the tls certificate. Set as "auto", "secret"
    # or "none" and fill the information in the corresponding section
    # 1) auto: generate the tls certificate automatically
    # 2) secret: read the tls certificate from the specified secret.
    # The tls certificate can be generated manually or by cert manager
    # 3) none: configure no tls certificate for the ingress. If the default
    # tls certificate is configured in the ingress controller, choose this option
    certSource: secret
    auto:
      # The common name used to generate the certificate, it's necessary
      # when the type isn't "ingress"
      commonName: ""
    secret:
      # The name of secret which contains keys named:
      # "tls.crt" - the certificate
      # "tls.key" - the private key
      secretName: "harbor-cert"
      notarySecretName: "harbor-cert"
  ingress:
    hosts:
      core: harbor.jtest.suse.com
      notary: harbor.jtest.suse.com

# The external URL for Harbor core service. It is used to
# 1) populate the docker/helm commands showed on portal
# 2) populate the token service URL returned to docker client
#
# Format: protocol://domain[:port]. Usually:
# 1) if "expose.type" is "ingress", the "domain" should be
# the value of "expose.ingress.hosts.core"
# 2) if "expose.type" is "clusterIP", the "domain" should be
# the value of "expose.clusterIP.name"
# 3) if "expose.type" is "nodePort", the "domain" should be
# the IP address of k8s node
#
# If Harbor is deployed behind the proxy, set it as the URL of proxy
externalURL: http://harbor.jtest.suse.com

# The initial password of Harbor admin. Change it from portal after launching Harbor
# or give an existing secret for it
# key in secret is given via (default to HARBOR_ADMIN_PASSWORD)
# existingSecretAdminPassword:
existingSecretAdminPasswordKey: changeme
harborAdminPassword: "changeme"

service:
  loadBalancerIP: "{{ harbor.lb_ip_addr }}"

persistence:
  enabled: false
  resourcePolicy: "keep"
  persistentVolumeClaim:
    registry:
      storageClass: "harbor-storage"
      accessMode: ReadWriteMany
      size: 10Gi
    jobservice:
      jobLog:
        storageClass: "harbor-storage"
        accessMode: ReadWriteMany
        size: 10Gi
    redis:
      storageClass: "harbor-storage"
      accessMode: ReadWriteMany
      size: 10Gi
    trivy:
      storageClass: "harbor-storage"
      accessMode: ReadWriteMany
      size: 10Gi
  imageChartStorage:
    disableredirect: false
    type: filesystem
    filesystem:
      rootdirectory: {{ harbor.storage_path }}

core:
  enabled: true
chartmuseum:
  enabled: true
clair:
  enabled: true
notary:
  enabled: true
trivy:
  enabled: true
  # replicas: 2
jobservice:
  enabled: true
  # replicas: 2
  jobLogger: stdout
registry:
  enabled: true
  # replicas: 2
portal:
  enabled: true
  # replicas: 2
cache:
  enabled: true
  expireHours: 24
database:
  type: internal

