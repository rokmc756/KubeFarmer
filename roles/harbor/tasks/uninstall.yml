---
# Uninstall Harbor continaer registry for CentOS 8.x or Rocky 8

- name: Down All Docker Containers for Harbor
  shell: |
    export PATH=$PATH:/usr/local/bin && docker compose -f /root/harbor/docker-compose.yml down
  register: docker_compose_down
  ignore_errors: yes
  until: docker_compose_down is succeeded
  # docker-compose down -v

- debug:
    var: docker_compose_down

#
- name: Remnove Database and Registry Directories Used by Harbor Containers
  file:
    path: "{{ item }}"
    state: absent
  register: db_reg_directory_removed
  with_items:
    - "/data/database"
    - "/data/registry"

- debug:
    var: db_reg_directory_removed

#
- name: Verify that Docker is Uninstalled Correctly by Removing the hello-world image
  shell: |
    export PATH=$PATH:/usr/local/bin && docker rm hello-world
  register: docker_rm_hello
  until: docker_rm_hello is succeeded
  ignore_errors: yes
  # ignore_errors: yes

- debug:
    var: docker_rm_hello

#
- name: Stop Harbor in the Background
  shell: |
    export PATH=$PATH:/usr/local/bin && docker-compose stop
  register: hardbor_stop
  until: harbor_stop is succeeded
  ignore_errors: yes
  # export PATH=$PATH:/usr/local/bin && docker-compose -f /root/harbor/docker-compose.yml down

- debug:
    var: harbor_down

#
- name: Uninstall Docker-Compose Using Pip
  shell: |
    export PATH=$PATH:/usr/local/bin && pip3 uninstall docker-compose -y
    export PATH=$PATH:/usr/local/bin && pip3 uninstall setuptools_rust -y
    export PATH=$PATH:/usr/local/bin && pip3 uninstall pip setuptools -y
  register: docker_compose_uninstalled
  ignore_errors: yes
  # pip2 install docker-compose

- debug:
    var: docker_uninstalled

#
- name: Alternative Python Version to Python3
  command: alternatives --set python /usr/bin/python3
  register: python_version_alternative
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8

- debug:
    var: python_version_alternative

#
- name: Disable and Stop Docker
  systemd:
    name: docker
    state: stopped
    enabled: no
  register: docker_disabled
  until: docker_disabled is succeeded
  retries: 10
  ignore_errors: yes

- debug:
    var: docker_disabled

#
- name: Remove Repository ( And Clean Up left-over Metadata )
  yum_repository:
    name: epel
    file: docker_repo
    state: absent
  register: docker_repo_removed
  ignore_errors: yes

- debug:
    var: docker_repo_removed

#
- name: Alternative Python 2.7 Version
  command: alternatives --set python /usr/bin/python2
  register: alternative_python_version
  when: hostvars[inventory_hostname].ansible_distribution_major_version|int <= 8
  # command: update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1

#
- name: Uninstall the Latest Version of Docker-CE Packages
  yum:
    name: "{{ item }}"
    state: absent
  with_items:
    - "docker-ce"
  register: docker_uninstalled

- debug:
    var: docker_uninstalled

#
- name: Uninstall the EPEL Repo and Other Required Packages to Your System
  yum:
    name: "{{ item }}"
    state: absent
  register: epel_uninstalled
  with_items:
    - epel-release
    - wget
    - yum-utils

- debug:
    var: epel_uninstalled

#
- name: Remove Certs and Harbor Files and Directories
  file:
    path: "{{ item }}"
    state: absent
  register: certs_harbor_removed
  with_items:
    - "/root/harbor"
    - "/root/certs"
    - "/etc/docker/cert.d/*"
    - "/etc/docker/daemon.json"
    - "/data/certs"
    - "/var/lib/docker"
    - "/etc/yum.repos.d/kubernetes.repo"
    - "/etc/yum.repos.d/docker-ce.repo"

#
- debug:
    var: certs_harbor_removed

#
- name: Enabling SELinux to be Required
  selinux:
    state: permissive
    policy: targeted
  register: selinux_enabled
#  notify:
#    - Restart system
#    - Waiting for server to come back after reboot
#  ignore_errors: yes

#- meta: flush_handlers

- debug:
    var: selinux_enabled.stdout_lines


#
#- name: Reboot required - Step 1
#  command: /usr/bin/needs-restarting
#  register: reboot_required
#  ignore_errors: True
#  changed_when: False

#
- name: Reboot required (Red Hat) - Step 2
  shell: ( /bin/sleep 5 ; /sbin/shutdown -r now "Ansible updates triggered" ) &
  async: 30
  poll: 0
  ignore_errors: true
  notify:
    - Waiting for server to come back after restart
#  when: reboot_required.rc == 1

- meta: flush_handlers

#
- name: Check if SELinux has been enabled in Configurtion File
  command: grep SELINUX /etc/sysconfig/selinux
  register: sevalue
  # ignore_errors: yes

- debug:
    var: sevalue.stdout_lines

