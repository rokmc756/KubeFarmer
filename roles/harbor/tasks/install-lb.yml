- name: Copy Harbor Loadbalancer Config Yaml
  template:
    src: harbor-loadbalancer.yaml.j2
    dest: "{{ base_path }}/harbor-loadbalancer.yaml"
  register: copy_harbor_lb_config_yaml
- debug: msg={{ copy_harbor_lb_config_yaml }}


#- name: Create Harbor Load Balancer
#  shell: |
#    kubectl apply -f harbor-loadbalancer.yaml
#  register: create_harbor_lb
#  args:
#    chdir: "{{ base_path }}/"
#- debug: msg={{ create_harbor_lb }}
#
## kubectl patch svc harbor-portal -n harbor -p '{"spec": {"type": "LoadBalancer"}}'
#
#
#- name: Validate if Harbor Containers are Running
#  shell: |
#    kubectl -n harbor get pod | grep harbor | awk '{print $3}' | cut -d : -f 1 | uniq
#  register: check_harbor_container
#  until: check_harbor_container.stdout.find("Running") != -1
#  retries: 100
#  delay: 10
#- debug: msg={{ check_harbor_container }}
#  when: print_debug == true
#
#
#- name: Print IP Addresses for LoadBalancer
#  shell: |
#    kubectl get all -A | grep LoadBalancer
#  register: print_lb_ipaddr
#  args:
#    chdir: "{{ base_path }}/"
#- debug: msg={{ print_lb_ipaddr }}
#  when: print_debug == true


# echo "Harbor Username Secret: $(kubectl -n ${HARBOR_NAMESPACE} get secret "harbor-${HARBOR_POD_ID}-controller-registry" --template={{.data.harborAdminUsername}})"
# echo "Harbor Password Secret: $(kubectl -n ${HARBOR_NAMESPACE} get secret "harbor-${HARBOR_POD_ID}-controller-registry" --template={{.data.harborAdminPassword}})"
#- name: Print Harbor Admin Password
#  shell: |
#    HARBOR_NAMESPACE=$(kubectl get ns | grep registry- | awk '{print $1}')
#    HARBOR_POD_ID=$(echo $HARBOR_NAMESPACE | sed 's/.*-//')
#    echo "Harbor Username: $(kubectl -n ${HARBOR_NAMESPACE} get secret "harbor-${HARBOR_POD_ID}-controller-registry" --template={{.data.harborAdminUsername}} | base64 --decode | base64 --decode)"
#    echo "Harbor Password: $(kubectl -n ${HARBOR_NAMESPACE} get secret "harbor-${HARBOR_POD_ID}-controller-registry" --template={{.data.harborAdminPassword}} | base64 --decode | base64 --decode)"
#  register: print_harbor_admin_password
#- debug: msg={{ print_harbor_admin_password }}
#  when: print_debug == true

# https://www.okteto.com/blog/guide-to-the-kubernetes-load-balancer-service/
# https://tamerlan.dev/load-balancing-in-kubernetes-a-step-by-step-guide/
# https://vmwire.com/2022/03/04/deploy-harbor-registry-with-helm-and-expose-with-ingress/

# kubectl apply -f lb-harbor.yaml
# Warning: resource services/harbor-portal is missing the kubectl.kubernetes.io/last-applied-configuration annotation which is required by kubectl apply. kubectl apply should only be used on resources created declaratively by either kubectl create --save-config or kubectl apply. The missing annotation will be patched automatically.
# service/harbor-portal configured
# root@osuse15-node01:~# kubectl get all -A
