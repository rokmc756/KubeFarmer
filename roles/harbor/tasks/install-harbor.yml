# https://medium.com/@ithesadson/how-to-deploy-a-harbor-with-helm-k8s-minikube-25f89af83610
# https://www.viktorious.nl/2023/01/12/deploy-harbor-registry-with-signed-certificates-using-cert-manager-lets-encrypt-and-aws-route-53/

- name: Create Directory for Persistent Volumes
  file:
    path: "{{ harbor.storage_path }}"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_pv_dir }}
  when: print_debug == true


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ item }}
  register: create_namespace
  with_items:
    - contour
    - harbor
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_pvc }}
  when: print_debug == true


- name: Copy Harbor Loadbalancer Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_harbor_lb_config_yaml
  with_items:
    - "harbor-values.yaml"
- debug: msg={{ copy_harbor_lb_config_yaml }}


- name: Deploy Contour
  shell: |
    helm install ingress bitnami/contour --create-namespace -n contour --wait
  register: deploy_contour
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_contour }}
  when: print_debug == true

# You can use the following command to check if the pods are running:
# kubectl get pods -n contour -w
# With the following command you can check if and where your ingress is available:
# kubectl get svc ingress-contour-envoy --namespace contour -wC
# And:
# kubectl describe svc ingress-contour-envoy --namespace contour | grep Ingress | awk '{print $3}'


# /usr/local/bin/helm install harbor harbor/harbor --set harborAdminPassword=changeme -f {{ base_path }}/harbor-values.yaml --create-namespace -n harbor --wait
- name: Deploy Harbor
  shell: |
    helm install harbor -f {{ base_path }}/harbor-values.yaml bitnami/harbor -n harbor --create-namespace
  register: deploy_harbor
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_harbor }}
  when: print_debug == true


- name: Validate if Harbor Containers are Running
  shell: |
    kubectl -n harbor get pods
  register: check_harbor_container
  until: check_harbor_container.stdout.find("ContainerCreating") == -1
  retries: 100
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_harbor_container }}
  when: print_debug == true


# ** Please be patient while the chart is being deployed **
#1. Get the Harbor URL:
#  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
#        Watch the status with: 'kubectl get svc --namespace harbor -w harbor'
#    export SERVICE_IP=$(kubectl get svc --namespace harbor harbor --template "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}")
#    echo "Harbor URL: http://$SERVICE_IP/"
#
#2. Login with the following credentials to see your Harbor application
#  echo Username: "admin"
#  echo Password: $(kubectl get secret --namespace harbor harbor-core-envvars -o jsonpath="{.data.HARBOR_ADMIN_PASSWORD}" | base64 -d)
#
#WARNING: There are "resources" sections in the chart not set. Using "resourcesPreset" is not recommended for production. For production installations, please set the following values according to your workload needs:
#  - core.resources
#  - exporter.resources
#  - jobservice.resources
#  - nginx.resources
#  - portal.resources
#  - registry.controller.resources
#  - registry.server.resources
#  - trivy.resources
#+info https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/

