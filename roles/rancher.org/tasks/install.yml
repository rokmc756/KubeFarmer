# https://oopflow.medium.com/setup-install-rancher-onto-existing-kubernetes-cluster-for-high-availability-7351f0284592
#
- name: Apply strictARP for VMWare or Cloud
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | \
    sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system
  register: apply_strict_arp
- debug: msg={{ apply_strict_arp }}


- name: Check strictARP
  shell: |
    kubectl get configmap kube-proxy -n kube-system -o yaml | grep strictARP
  register: check_strict_arp
  ignore_errors: yes
- debug: msg={{ check_strict_arp }}


# helm repo add metallb https://metallb.github.io/metallb

- name: Create Namespace for Metallb
  shell: |
    kubectl create namespace metallb-system
  register: create_metallb_namespace
- debug: msg={{ create_metallb_namespace }}


- name: Apply the Metallb Native
  shell: |
    helm install metallb metallb/metallb -n metallb-system
  register: apply_metallb_native_config
- debug: msg={{ apply_metallb_native_config }}


#- name: Apply the Metallb Native
#  shell: |
#    kubectl apply -f \
#    https://raw.githubusercontent.com/metallb/metallb/v{{ metallb.major_version }}.{{ metallb.minor_version }}.{{ metallb.patch_version }}/config/manifests/metallb-native.yaml
#  register: apply_metallb_native_config
#- debug: msg={{ apply_metallb_native_config }}


- name: Create Secret for Metallb Namespace
  shell: |
    kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey="$(openssl rand -base64 128)"
  register: create_metallb_secret
  ignore_errors: yes
- debug: msg={{ create_metallb_secret }}


- name: Copy Metallb Config Yaml for VMware
  template:
    src: metallb-config-vmware.yaml.j2
    dest: "{{ base_path }}/metallb-config-vmware.yaml"
  register: copy_metallb_vmware_yaml
- debug: msg={{ copy_metallb_vmware_yaml }}


- name: Apply the Metallb Config for VMware
  shell: |
    kubectl apply -f "{{ base_path }}"/metallb-config-vmware.yaml
  register: apply_metallb_config
  until: apply_metallb_config is succeeded
- debug: msg={{ apply_metallb_config }}


- name: Clone Kubernetest Ingress
  shell: |
    git -C "{{ base_path }}" clone https://github.com/nginxinc/kubernetes-ingress.git \
    --branch v{{ nginx.k8s_ingress.major_version }}.{{ nginx.k8s_ingress.minor_version }}.{{ nginx.k8s_ingress.patch_version }}
  register: clone_k8s_ingress
  ignore_errors: true
- debug: msg={{ clone_k8s_ingress }}


- name: Apply NGINX Ingress CRDs
  shell: |
    kubectl apply -f crds/ --namespace=nginx-ingress
  register: apply_nginx_ingress_crds
  args:
    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
- debug: msg={{ apply_nginx_ingress_crds }}


- name: Install NGINX Ingress
  shell: |
    helm install nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress --create-namespace=true
  register: install_nginx_ingress
  args:
    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
- debug: msg={{ install_nginx_ingress }}


- name: Upgrade NGINX Ingress CRDs
  shell: |
    helm upgrade nginx-ingress nginx-stable/nginx-ingress --namespace=nginx-ingress
  register: upgrade_nginx_ingress_crds
  args:
    chdir: "{{ base_path }}/kubernetes-ingress/deployments/helm-chart"
- debug: msg={{ upgrade_nginx_ingress_crds }}


- name: Create Namespace for Rancher
  shell: |
    kubectl create namespace cattle-system
  register: create_rancher_namespace
- debug: msg={{ create_rancher_namespace }}


- name: Apply Cert Manager CRDs
  shell: |
    kubectl apply --validate=false \
    -f https://github.com/jetstack/cert-manager/releases/download/v{{ cm.major_version }}.{{ cm.minor_version }}.{{ cm.patch_version }}/cert-manager.crds.yaml
  register: apply_cert_manager_crds
- debug: msg={{ apply_cert_manager_crds }}


- name: Create Namespace for Cert Manager
  shell: |
    kubectl create namespace cert-manager
  register: create_cert_manager_namespace
- debug: msg={{ create_cert_manager_namespace }}


- name: Intall Cert Manager by Helm
  shell: |
    helm install cert-manager jetstack/cert-manager --namespace cert-manager \
    --version v{{ cm.major_version }}.{{ cm.minor_version }}.{{ cm.patch_version }}
  register: install_cert_manager
- debug: msg={{ install_cert_manager }}


- name: Copy Rancher Loadbalancer Config Yaml
  template:
    src: rancher-loadbalancer.yaml.j2
    dest: "{{ base_path }}/rancher-loadbalancer.yaml"
  register: copy_rancher_lb_config_yaml
- debug: msg={{ copy_rancher_lb_config_yaml }}


- name: Apply Rancher Load Balancer
  shell: |
    kubectl apply -f "{{ base_path }}"/rancher-loadbalancer.yaml
  register: apply_rancher_lb
- debug: msg={{ apply_rancher_lb }}


- name: Check Racher Pods
  shell: kubectl get all -n cattle-system
  register: check_rancher_pods
  until: check_rancher_pods.stdout.find("pending") == -1
  retries: 20
- debug: msg={{ check_rancher_pods }}


- name: Install Rancher by Helm
  shell: |
    helm install rancher rancher-stable/rancher --namespace cattle-system --set hostname={{ rancher.hostname }}
  register: install_rancher
- debug: msg={{ install_rancher }}


- name: Check the Status of the Deployment
  shell: |
    kubectl -n cattle-system rollout status deploy/rancher
  register: check_deployment_status
- debug: msg={{ check_deployment_status }}


- name: Check if Rancher is Deployed Successfully
  shell: kubectl get all -n cattle-system
  register: check_rancher_deployment
  ignore_errors: yes
  until: check_rancher_deployment.stdout.find("NotReady") == -1
  retries: 20
- debug: msg={{ check_rancher_deployment }}


- name: Get IP Address of Rancher Load Balancer and Nginx Ingress Controller
  shell: |
    kubectl get all -A | grep -E "service/rancher-loadbalancer|service/nginx-ingress-controller"
  register: get_ipaddr_rancher_lb
  ignore_errors: yes
- debug: msg={{ get_ipaddr_rancher_lb }}

# [ Check Rancher and NGINX Ingress ]
# kubectl get events --all-namespaces  --sort-by='.metadata.creationTimestamp'
# kubectl -n cattle-system describe pods
# kubectl -n cattle-system get all
# kubectl -n cattle-system get pods
# kubectl -n cattle-system logs <pod-name>

