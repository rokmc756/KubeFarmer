- name: Create Directory for Persistent Volumes
  file:
    path: "{{ mariadb.replica.storage_path }}"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_pv_dir }}
  when: print_debug == true


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ mariadb.replica.namespace }}
  register: create_namespace
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "replica-storage-class.yaml"
    - "replica-storage-pv.yaml"
    - "replica-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  with_items:
    - "replica-storage-class.yaml"
    - "replica-storage-pv.yaml"
    - "replica-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ create_pvc }}
  when: print_debug == true


- name: Copy MariaDB Replication Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_replica_config_yaml
  with_items:
    - "mariadb-replica-values.yaml"
- debug: msg={{ copy_replica_config_yaml }}


- name: Deploy MariaDB Galera Cluster
  shell:
    helm install mariadb-replica bitnami/mariadb --namespace {{ mariadb.replica.namespace }} -f {{ base_path }}/mariadb-replica-values.yaml
  register: deploy_replica
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ deploy_replica }}
  when: print_debug == true


- name: Validate if MariaDB Replication Containers are Running Normally
  shell: |
    kubectl -n {{ mariadb.replica.namespace }} get pods | sed 1d | grep replica-secondary- | awk '{print $3}' | grep Running | wc -l
  register: check_replica_container
  until: mariadb.replica.replica|int == check_replica_container.stdout|int
  retries: 60
  delay: 10
  args:
    chdir: "{{ base_path }}/"
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
- debug: msg={{ check_replica_container }}
  when: print_debug == true

