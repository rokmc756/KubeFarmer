- name: Uninstall Kafka
  shell: |
    /usr/local/bin/helm uninstall kafka -n kafka
  register: uninstall_kafka
  ignore_errors: true
- debug: msg={{ uninstall_kafka }}
  when: print_debug == true


- name: Validate if Kafka Containers are deleted
  shell: |
    kubectl get pods -n kafka | grep kafka-controller | awk '{print $3}' | uniq
  register: delete_kafka_container
  ignore_errors: true
  until: delete_kafka_container.stdout.find("") != -1
  retries: 100
  delay: 10
- debug: msg={{ delete_kafka_container }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Delete Persistent Volumes, Claim and Storage Class
  shell: |
    kubectl delete -f {{ item }}
  register: delete_pvc
  ignore_errors: true
  with_items:
    - "local-storage-pvc.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-class.yaml"
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ delete_pvc }}
  when: print_debug == true


- name: Delete Cluster Local PVC Config Yaml
  file:
    path: "{{ base_path }}/{{ item }}"
    state: absent
  register: delete_cluster_local_pvc_config_yaml
  ignore_errors: true
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ delete_cluster_local_pvc_config_yaml }}
  when: print_debug == true


- name: Delete Namespace for Persistent Volumes
  shell: |
    kubectl delete namespace {{ item }}
  register: delete_namespace
  ignore_errors: true
  with_items:
    - kafka
    - istio-system
- debug: msg={{ delete_namespace }}
  when: print_debug == true


- name: Directory for Persistent Volumes
  file:
    path: "{{ kafka.storage_path }}"
    state: absent
  register: delete_pv_dir
  ignore_errors: true
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ delete_pv_dir }}
  when: print_debug == true


#- name: Validate if kafka Containers are Running
#  shell: |
#    kubectl -n kafka get pod | grep kafka | awk '{print $3}' | cut -d : -f 1
#  register: check_kafka_container
#  until: check_kafka_container.stdout.find("Running") != -1
#  retries: 100
#  delay: 10
#- debug: msg={{ check_kafka_container }}
#  when: print_debug == true

