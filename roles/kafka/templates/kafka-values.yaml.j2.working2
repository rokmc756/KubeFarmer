log4j: ""
existingLog4jConfigMap: ""
heapOpts: -XX:InitialRAMPercentage=75 -XX:MaxRAMPercentage=75
brokerRackAssignment: ""
interBrokerProtocolVersion: ""


listeners:
  client:
    containerPort: 9092
    protocol: SASL_PLAINTEXT
    name: CLIENT
    sslClientAuth: ""
  controller:
    name: CONTROLLER
    containerPort: 9093
    protocol: SASL_PLAINTEXT
    sslClientAuth: ""
  interbroker:
    containerPort: 9094
    protocol: SASL_PLAINTEXT
    name: INTERNAL
    sslClientAuth: ""
  external:
    containerPort: 9095
    protocol: SASL_PLAINTEXT
    name: EXTERNAL
    sslClientAuth: ""
  overrideListeners: ""
  advertisedListeners: ""
  securityProtocolMap: ""


sasl:
  enabledMechanisms: PLAIN,SCRAM-SHA-256,SCRAM-SHA-512
  interBrokerMechanism: PLAIN
  controllerMechanism: PLAIN
  oauthbearer:
    tokenEndpointUrl: ""
    jwksEndpointUrl: ""
    expectedAudience: ""
    subClaimName: "sub"
  interbroker:
    user: inter_broker_user
    password: ""
    clientId: inter_broker_client
    clientSecret: ""
  controller:
    user: controller_user
    password: ""
    clientId: controller_broker_client
    clientSecret: ""
  client:
    users:
      - user1
    passwords: ""
  zookeeper:
    user: ""
    password: ""
  existingSecret: ""


tls:
  type: JKS
  pemChainIncluded: false
  existingSecret: ""
  autoGenerated: false
  passwordsSecret: ""
  passwordsSecretKeystoreKey: keystore-password
  passwordsSecretTruststoreKey: truststore-password
  keystorePassword: ""
  truststorePassword: ""
  keyPassword: ""
  jksKeystoreKey: ""
  jksTruststoreSecret: ""
  jksTruststoreKey: ""
  endpointIdentificationAlgorithm: https
  sslClientAuth: "required"
  zookeeper:
    enabled: false
    verifyHostname: true
    existingSecret: ""
    existingSecretKeystoreKey: zookeeper.keystore.jks
    existingSecretTruststoreKey: zookeeper.truststore.jks
    passwordsSecret: ""
    passwordsSecretKeystoreKey: keystore-password
    passwordsSecretTruststoreKey: truststore-password
    keystorePassword: ""
    truststorePassword: ""


controller:
  replicaCount: {{ _kafka.controller.replica }}
  controllerOnly: false
  minId: 0
  zookeeperMigrationMode: false
  secretConfig: ""
  existingSecretConfig: ""
  heapOpts: -Xmx1024m -Xms1024m
  resourcesPreset: "small"
  automountServiceAccountToken: true
  hostNetwork: false
  hostIPC: false
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  terminationGracePeriodSeconds: ""
  podManagementPolicy: Parallel
  minReadySeconds: 0
  priorityClassName: ""
  runtimeClassName: ""
  enableServiceLinks: true
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  autoscaling:
    vpa:
      enabled: false
      updatePolicy:
        updateMode: Auto
    hpa:
      enabled: false
      minReplicas: ""
      maxReplicas: ""
      targetCPU: ""
      targetMemory: ""
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /opt/bitnami/kafka/logs


broker:
  replicaCount: {{ _kafka.broker.replica }}
  minId: 100
  zookeeperMigrationMode: false
  heapOpts: -Xmx1024m -Xms1024m
  resourcesPreset: "small"
  automountServiceAccountToken: true
  hostNetwork: false
  hostIPC: false
  podManagementPolicy: Parallel
  minReadySeconds: 0
  priorityClassName: ""
  runtimeClassName: ""
  enableServiceLinks: true
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  pdb:
    create: true
    minAvailable: ""
    maxUnavailable: ""
  autoscaling:
    vpa:
      enabled: false
      updatePolicy:
        updateMode: Auto
    hpa:
      enabled: false
      minReplicas: ""
      maxReplicas: ""
      targetCPU: ""
      targetMemory: ""
  persistence:
    enabled: true
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /bitnami/kafka
  logPersistence:
    enabled: false
    existingClaim: ""
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    mountPath: /opt/bitnami/kafka/logs


service:
  type: ClusterIP
  ports:
    client: 9092
    controller: 9093
    interbroker: 9094
    external: 9095
  nodePorts:
    client: ""
    external: ""
  sessionAffinity: None
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerClass: ""
  allocateLoadBalancerNodePorts: true
  externalTrafficPolicy: Cluster


externalAccess:
  enabled: true
  autoDiscovery:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/kubectl
      tag: 1.32.0-debian-12-r0
      digest: ""
      pullPolicy: IfNotPresent
    resourcesPreset: "nano"
  controller:
    forceExpose: false
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerClass: ""
      allocateLoadBalancerNodePorts: true
      useHostIPs: false
      usePodIPs: false
      domain: ""
      publishNotReadyAddresses: false
  broker:
    service:
      type: LoadBalancer
      ports:
        external: 9094
      loadBalancerClass: ""
      allocateLoadBalancerNodePorts: true
      useHostIPs: false
      usePodIPs: false
      domain: ""
      publishNotReadyAddresses: false


networkPolicy:
  enabled: true
  allowExternal: true
  allowExternalEgress: true
  addExternalClientAccess: true


volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r34
    digest: ""
    pullPolicy: IfNotPresent
  resourcesPreset: "nano"
  containerSecurityContext:
    runAsUser: 0


serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true


rbac:
  create: true


metrics:
  jmx:
    enabled: true
    kafkaJmxPort: 5555
    image:
      registry: docker.io
      repository: bitnami/jmx-exporter
      tag: 1.1.0-debian-12-r1
      digest: ""
      pullPolicy: IfNotPresent
    containerPorts:
      metrics: 5556
    resourcesPreset: "micro"
    service:
      ports:
        metrics: 5556
      clusterIP: ""
      sessionAffinity: None
    whitelistObjectNames:
      - kafka.controller:*
      - kafka.server:*
      - java.lang:*
      - kafka.network:*
      - kafka.log:*
    existingConfigmap: ""
    extraRules: ""
  serviceMonitor:
    enabled: false
    namespace: ""
    path: /metrics
    interval: ""
    scrapeTimeout: ""
    honorLabels: false
    jobLabel: ""
  prometheusRule:
    enabled: false
    namespace: ""


topic:
  autoCreate: true


provisioning:
  enabled: false
  automountServiceAccountToken: true
  numPartitions: 1
  replicationFactor: 1
  parallel: 1
  preScript: ""
  postScript: ""
  auth:
    tls:
      type: jks
      certificatesSecret: ""
      cert: tls.crt
      key: tls.key
      caCert: ca.crt
      keystore: keystore.jks
      truststore: truststore.jks
      passwordsSecret: ""
      keyPasswordSecretKey: key-password
      keystorePasswordSecretKey: keystore-password
      truststorePasswordSecretKey: truststore-password
      keyPassword: ""
      keystorePassword: ""
      truststorePassword: ""
  serviceAccount:
    create: true
    name: ""
    automountServiceAccountToken: true
  resourcesPreset: "micro"
  resources: {}
  schedulerName: ""
  enableServiceLinks: true
  waitForKafka: true
  useHelmHooks: true


kraft:
  enabled: {{ _kafka.kraft.enabled }}
  existingClusterIdSecret: ""
  clusterId: ""
  controllerQuorumVoters: ""


zookeeperChrootPath: ""


#  replicaCount: {{ _kafka.zookeeper.replica }}
zookeeper:
  enabled: {{ _kafka.zookeeper.enabled }}
  auth:
    client:
      enabled: false
      clientUser: ""
      clientPassword: ""
      serverUsers: ""
      serverPasswords: ""
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
externalZookeeper:

