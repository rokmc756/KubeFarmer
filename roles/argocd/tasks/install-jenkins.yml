- name: Create Directory for Persistent Volumes
  file:
    path: "{{ jenkins.storage_path }}"
    state: directory
    owner: root
    group: root
    mode: 0777
  register: create_pv_dir
  delegate_to: "{{ item }}"
  delegate_facts: True
  with_items:
    - "{{ groups['all'] }}"
- debug: msg={{ create_pv_dir }}
  when: print_debug == true


- name: Create Namespace for Persistent Volumes
  shell: |
    kubectl create namespace {{ item }}
  register: create_namespace
  with_items:
    - jenkins
    - istio-system
- debug: msg={{ create_namespace }}
  when: print_debug == true


- name: Copy Cluster Local PVC Config Yaml
  template:
    src: "{{ item }}.j2"
    dest: "{{ base_path }}/{{ item }}"
  register: copy_cluster_local_pvc_config_yaml
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
- debug: msg={{ copy_cluster_local_pvc_config_yaml }}


- name: Cluster Settings for a Production Cluster Running in a Dynamic Cloud Environment including VMware
  shell: |
    kubectl create -f {{ item }}
  register: create_pvc
  with_items:
    - "local-storage-class.yaml"
    - "local-storage-pv.yaml"
    - "local-storage-pvc.yaml"
  args:
    chdir: "{{ base_path }}/"
- debug: msg={{ create_pvc }}
  when: print_debug == true


- name: Deploy Jenkins
  shell: |
    /usr/local/bin/helm install jenkins jenkins/jenkins -n jenkins --set persistence.existingClaim=jenkins --create-namespace --set adminPassword={{ jenkins.admin_password }}
  register: deploy_jenkins
- debug: msg={{ deploy_jenkins }}
  when: print_debug == true


- name: Validate if Jenkins Containers are Running
  shell: |
    kubectl -n jenkins get pod | grep jenkins | awk '{print $3}' | cut -d : -f 1
  register: check_jenkins_container
  until: check_jenkins_container.stdout.find("Running") != -1
  retries: 100
  delay: 10
- debug: msg={{ check_jenkins_container }}
  when: print_debug == true

